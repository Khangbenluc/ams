# app.py
# Streamlit app: B·∫¢NG K√ä 01/TNDN
# - OCR tr·ª±c ti·∫øp (camera/file) cho CCCD v√† c√¢n (PaddleOCR)
# - Gi·ªØ CCCD l√† chu·ªói (kh√¥ng m·∫•t s·ªë 0)
# - Xu·∫•t PDF (ReportLab) v·ªõi font Unicode (DejaVu n·∫øu c√≥), b·∫£ng k·∫ª, in-ready
# - Fallback HTML in-ready
# - Preview PDF/HTML v√† t·∫£i xu·ªëng
# - L∆∞u l·ªãch s·ª≠ t·ª± ƒë·ªông (CSV)
#
# NOTE: Place DejaVuSans.ttf in same folder for best Vietnamese support in PDF.
# Requirements example:
# streamlit
# opencv-python-headless
# numpy
# pandas
# paddleocr
# paddlepaddle
# pytz
# reportlab

import streamlit as st
import cv2
import numpy as np
import pandas as pd
import io
import os
import sys
import logging
from datetime import datetime
import pytz
from paddleocr import PaddleOCR
import base64
from typing import Tuple, Dict, Any, Optional, List

# ReportLab imports (optional)
try:
    from reportlab.lib.pagesizes import A4
    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image
    from reportlab.lib import colors
    from reportlab.lib.units import mm
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.pdfbase.ttfonts import TTFont
    from reportlab.pdfbase import pdfmetrics
    from reportlab.pdfbase.cidfonts import UnicodeCIDFont
    REPORTLAB_OK = True
except Exception:
    REPORTLAB_OK = False

# ---------------- Config ----------------
APP_TITLE = "B·∫¢NG K√ä 01/TNDN ‚Äî OCR CCCD & C√¢n ‚Äî PDF/HTML ƒë·∫πp"
LICH_SU_FILE = "lich_su_giao_dich.csv"
CSV_COLUMNS = [
    "Th·ªùi gian", "ƒê∆°n v·ªã b√°n h√†ng", "MST", "ƒê·ªãa ch·ªâ ƒë∆°n v·ªã",
    "ƒê·ªãa ƒëi·ªÉm thu mua", "Ng∆∞·ªùi ph·ª• tr√°ch",
    "H·ªç v√† T√™n", "S·ªë CCCD", "Qu√™ qu√°n",
    "Kh·ªëi l∆∞·ª£ng", "ƒê∆°n v·ªã t√≠nh", "ƒê∆°n gi√°", "Th√†nh ti·ªÅn"
]
DEFAULT_DIA_DIEM = "B·∫øn L·ª©c"
TIMEZONE = "Asia/Ho_Chi_Minh"

# Logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s", stream=sys.stdout)
logger = logging.getLogger(__name__)

# Streamlit config
st.set_page_config(page_title="B·∫£ng k√™ 01/TNDN", layout="wide", page_icon="üìÑ")

# Ensure history csv exists
if not os.path.exists(LICH_SU_FILE):
    df_empty = pd.DataFrame(columns=CSV_COLUMNS)
    df_empty.to_csv(LICH_SU_FILE, index=False, encoding="utf-8")
    logger.info("Created history CSV: %s", LICH_SU_FILE)

# ---------------- OCR init ----------------
@st.cache_resource
def init_ocr():
    try:
        reader = PaddleOCR(lang="vi", use_angle_cls=False)
        logger.info("Initialized PaddleOCR.")
        return reader
    except Exception as e:
        logger.exception("Failed to init PaddleOCR: %s", e)
        raise

try:
    ocr = init_ocr()
except Exception:
    ocr = None

# ---------------- Helpers ----------------
def now_local_str(fmt: str = "%d/%m/%Y") -> str:
    tz = pytz.timezone(TIMEZONE)
    return datetime.now(tz).strftime(fmt)

def now_iso() -> str:
    tz = pytz.timezone(TIMEZONE)
    return datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")

def safe_float_from_str(s: str) -> float:
    if s is None:
        return 0.0
    s0 = str(s).strip()
    if s0 == "":
        return 0.0
    s0 = s0.replace(" ", "")
    candidates = []
    if "." in s0 and "," in s0:
        candidates.append(s0.replace(".", "").replace(",", "."))
        candidates.append(s0.replace(",", ""))
    else:
        if "," in s0 and "." not in s0:
            candidates.append(s0.replace(",", ""))
        else:
            candidates.append(s0)
    for cand in candidates:
        try:
            return float(cand)
        except:
            continue
    cleaned = "".join(ch for ch in s0 if ch.isdigit() or ch == ".")
    try:
        return float(cleaned) if cleaned else 0.0
    except:
        return 0.0

def fmt_money(v: float) -> str:
    try:
        n = int(round(v))
        return f"{n:,}".replace(",", ".")
    except:
        return "0"

dv_words = ['kh√¥ng','m·ªôt','hai','ba','b·ªën','nƒÉm','s√°u','b·∫£y','t√°m','ch√≠n']
def read3(n: int) -> str:
    s = ""
    tr = n // 100
    ch = (n % 100) // 10
    d = n % 10
    if tr > 0:
        s += dv_words[tr] + " trƒÉm"
        if ch == 0 and d > 0:
            s += " linh"
    if ch > 1:
        s += (" " if s else "") + dv_words[ch] + " m∆∞∆°i"
        if d == 1:
            s += " m·ªët"
        elif d == 5:
            s += " lƒÉm"
        elif d > 0:
            s += " " + dv_words[d]
    elif ch == 1:
        s += (" " if s else "") + "m∆∞·ªùi"
        if d == 5:
            s += " lƒÉm"
        elif d > 0:
            s += " " + dv_words[d]
    elif ch == 0 and d > 0:
        s += (" " if s else "") + dv_words[d]
    return s.strip()

def to_words_vnd(num: float) -> str:
    try:
        num = int(round(num))
    except:
        return "Kh√¥ng ƒë·ªìng"
    if num <= 0:
        return "Kh√¥ng ƒë·ªìng"
    units = ['',' ngh√¨n',' tri·ªáu',' t·ª∑',' ngh√¨n t·ª∑',' tri·ªáu t·ª∑']
    out = []
    i = 0
    while num > 0 and i < len(units):
        chunk = num % 1000
        if chunk > 0:
            out.insert(0, (read3(chunk) + units[i]).strip())
        num //= 1000
        i += 1
    s = ' '.join(out).strip()
    return s[0].upper() + s[1:] + " ƒë·ªìng"

def normalize_cccd_candidate(candidate: str) -> str:
    if candidate is None:
        return ""
    digits = ''.join(ch for ch in str(candidate) if ch.isdigit())
    if len(digits) >= 12:
        return digits[:12]
    if 9 <= len(digits) < 12:
        return digits.zfill(12)
    return digits

# ---------------- OCR helpers ----------------
def img_from_uploaded_file(uploaded) -> Optional[np.ndarray]:
    if uploaded is None:
        return None
    try:
        data = uploaded.getvalue() if hasattr(uploaded, "getvalue") else uploaded.read()
        file_bytes = np.asarray(bytearray(data), dtype=np.uint8)
        img = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)
        return img
    except Exception as e:
        logger.exception("img_from_uploaded_file error: %s", e)
        return None

def ocr_image_to_raw_lines(img: np.ndarray) -> List[Tuple]:
    if img is None:
        return []
    if ocr is None:
        logger.warning("OCR engine not initialized.")
        return []
    try:
        result = ocr.ocr(img, cls=False)
        if not result:
            return []
        return result[0]
    except Exception as e:
        logger.exception("ocr_image_to_raw_lines error: %s", e)
        return []

def extract_text_lines_from_uploaded(uploaded) -> List[str]:
    img = img_from_uploaded_file(uploaded)
    if img is None:
        return []
    raw = ocr_image_to_raw_lines(img)
    lines = []
    for ln in raw:
        try:
            lines.append(ln[1][0].strip())
        except:
            continue
    return lines

# ---------------- Extract CCCD & scale ----------------
def trich_xuat_cccd_from_uploaded(uploaded) -> Tuple[str, str, str]:
    ho_ten = ""
    so_cccd = ""
    que_quan = ""
    if uploaded is None:
        return ho_ten, so_cccd, que_quan
    img = img_from_uploaded_file(uploaded)
    if img is None:
        return ho_ten, so_cccd, que_quan
    raw = ocr_image_to_raw_lines(img)
    texts = [ln[1][0].strip() for ln in raw if ln and ln[1] and ln[1][0]]
    for idx, txt in enumerate(texts):
        up = txt.upper()
        if "H·ªå V√Ä T√äN" in up or "HO VA TEN" in up or "H·ªå T√äN" in up:
            if idx + 1 < len(texts):
                candidate = texts[idx + 1].strip()
                if candidate:
                    ho_ten = candidate
        digits = ''.join(ch for ch in txt if ch.isdigit())
        if len(digits) >= 9:
            c = normalize_cccd_candidate(digits)
            if c:
                so_cccd = c
        if "QU√ä QU√ÅN" in up or "QUE QUAN" in up:
            if idx + 1 < len(texts):
                candidate = texts[idx + 1].strip()
                if candidate:
                    que_quan = candidate
    if not so_cccd:
        for txt in texts:
            digits = ''.join(ch for ch in txt if ch.isdigit())
            if len(digits) >= 12:
                so_cccd = normalize_cccd_candidate(digits)
                break
    return ho_ten, so_cccd, que_quan

def trich_xuat_can_from_uploaded(uploaded) -> str:
    if uploaded is None:
        return ""
    img = img_from_uploaded_file(uploaded)
    if img is None:
        return ""
    raw = ocr_image_to_raw_lines(img)
    for ln in raw:
        txt = ln[1][0]
        cleaned = ''.join(ch for ch in txt if ch.isdigit() or ch in '.,')
        if any(ch.isdigit() for ch in cleaned):
            cleaned2 = cleaned.replace(',', '.')
            parts = cleaned2.split('.')
            if len(parts) > 2:
                cleaned2 = ''.join(parts[:-1]) + '.' + parts[-1]
            cleaned2 = cleaned2.strip('.')
            return cleaned2
    return ""

# ---------------- CSV functions ----------------
def append_history_row(row: Dict[str, Any]) -> None:
    try:
        df = pd.DataFrame([row])
        df = df.reindex(columns=CSV_COLUMNS)
        df.to_csv(LICH_SU_FILE, mode='a', header=False, index=False, encoding='utf-8')
        logger.info("Appended history row.")
    except Exception as e:
        logger.exception("append_history_row error: %s", e)

def read_history_df() -> pd.DataFrame:
    try:
        df = pd.read_csv(LICH_SU_FILE, encoding='utf-8')
        return df
    except Exception as e:
        logger.exception("read_history_df error: %s", e)
        return pd.DataFrame(columns=CSV_COLUMNS)

# ---------------- PDF builder (fixed font + table) ----------------
def build_pdf_bytes_from_row(row: Dict[str, Any]) -> Optional[bytes]:
    if not REPORTLAB_OK:
        logger.warning("ReportLab not installed; cannot create PDF.")
        return None
    try:
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4,
                                leftMargin=18*mm, rightMargin=18*mm,
                                topMargin=18*mm, bottomMargin=18*mm)
        # Register DejaVu if present; else register CID font fallback
        font_name = "Helvetica"
        try:
            if os.path.exists("DejaVuSans.ttf"):
                pdfmetrics.registerFont(TTFont("DejaVu", "DejaVuSans.ttf"))
                font_name = "DejaVu"
                logger.info("Using DejaVu font for PDF.")
            else:
                # register CID fallback
                pdfmetrics.registerFont(UnicodeCIDFont('STSong-Light'))
                font_name = "STSong-Light"
                logger.info("Using STSong-Light (CID) as fallback font.")
        except Exception as e:
            logger.exception("Font registration failed: %s", e)
            font_name = "Helvetica"

        styles = getSampleStyleSheet()
        styles.add(ParagraphStyle(name='VNTitle', fontName=font_name, fontSize=13, alignment=1, leading=15))
        styles.add(ParagraphStyle(name='VNNormal', fontName=font_name, fontSize=10, leading=12))
        styles.add(ParagraphStyle(name='VNSmall', fontName=font_name, fontSize=9, leading=11))

        elements = []
        elements.append(Paragraph("C·ªòNG H√íA X√É H·ªòI CH·ª¶ NGHƒ®A VI·ªÜT NAM", styles['VNSmall']))
        elements.append(Paragraph("ƒê·ªôc l·∫≠p - T·ª± do - H·∫°nh ph√∫c", styles['VNSmall']))
        elements.append(Spacer(1, 6))
        elements.append(Paragraph("M·∫™U S·ªê: 01/TNDN", styles['VNSmall']))
        elements.append(Spacer(1, 8))
        elements.append(Paragraph("B·∫¢NG K√ä THU MUA H√ÄNG H√ìA, D·ªäCH V·ª§ MUA V√ÄO KH√îNG C√ì H√ìA ƒê∆†N", styles['VNTitle']))
        elements.append(Spacer(1, 10))

        if row.get('don_vi'):
            elements.append(Paragraph(f"ƒê∆°n v·ªã: {row.get('don_vi')}", styles['VNSmall']))
        if row.get('mst'):
            elements.append(Paragraph(f"MST: {row.get('mst')}", styles['VNSmall']))
        if row.get('dia_chi'):
            elements.append(Paragraph(f"ƒê·ªãa ch·ªâ: {row.get('dia_chi')}", styles['VNSmall']))
        elements.append(Spacer(1, 6))
        elements.append(Paragraph(f"ƒê·ªãa ƒëi·ªÉm thu mua: {row.get('dia_diem','')}", styles['VNSmall']))
        elements.append(Paragraph(f"Ng∆∞·ªùi ph·ª• tr√°ch: {row.get('phu_trach','')}", styles['VNSmall']))
        elements.append(Paragraph(f"Ng√†y l·∫≠p: {row.get('ngay_lap','')}", styles['VNSmall']))
        elements.append(Spacer(1, 8))

        elements.append(Paragraph("<b>Th√¥ng tin ng∆∞·ªùi b√°n</b>", styles['VNNormal']))
        elements.append(Paragraph(f"H·ªç v√† t√™n: {row.get('ho_va_ten','')}", styles['VNNormal']))
        elements.append(Paragraph(f"S·ªë CCCD/CMND: {row.get('so_cccd','')}", styles['VNNormal']))
        elements.append(Paragraph(f"Qu√™ qu√°n: {row.get('que_quan','')}", styles['VNNormal']))
        elements.append(Spacer(1, 8))

        table_data = [
            ["STT", "T√™n h√†ng/d·ªãch v·ª•", "ƒêVT", "S·ªë l∆∞·ª£ng", "ƒê∆°n gi√° (VNƒê)", "Th√†nh ti·ªÅn (VNƒê)"],
            [
                "1",
                str(row.get('mieu_ta', 'H√†ng h√≥a')),
                str(row.get('don_vi_unit', '')),
                str(row.get('so_luong', '')),
                fmt_money(row.get('don_gia', 0)),
                fmt_money(row.get('thanh_tien', 0))
            ]
        ]
        col_widths = [18*mm, 80*mm, 22*mm, 30*mm, 35*mm, 40*mm]
        t = Table(table_data, colWidths=col_widths, hAlign='LEFT')
        t.setStyle(TableStyle([
            ('FONTNAME', (0,0), (-1,-1), font_name),
            ('FONTSIZE', (0,0), (-1,-1), 10),
            ('BACKGROUND', (0,0), (-1,0), colors.HexColor("#f3f6fb")),
            ('ALIGN', (0,0), (-1,0), 'CENTER'),
            ('ALIGN', (3,1), (5, -1), 'RIGHT'),
            ('VALIGN', (0,0), (-1,-1), 'MIDDLE'),
            ('GRID', (0,0), (-1,-1), 0.5, colors.HexColor("#bfc9d9")),
            ('LEFTPADDING', (1,1), (-1,-1), 6),
            ('RIGHTPADDING', (1,1), (-1,-1), 6),
        ]))
        elements.append(t)
        elements.append(Spacer(1, 10))
        elements.append(Paragraph(f"T·ªïng c·ªông: {fmt_money(row.get('thanh_tien', 0))} VNƒê", styles['VNNormal']))
        elements.append(Paragraph(f"S·ªë ti·ªÅn b·∫±ng ch·ªØ: {to_words_vnd(row.get('thanh_tien', 0))}", styles['VNNormal']))
        elements.append(Spacer(1, 20))

        sign_table = Table([
            ["Ng∆∞·ªùi l·∫≠p b·∫£ng k√™\n(K√Ω, ghi r√µ h·ªç t√™n)", "", "Th·ªß tr∆∞·ªüng ƒë∆°n v·ªã\n(K√Ω, ƒë√≥ng d·∫•u)"]
        ], colWidths=[70*mm, 30*mm, 70*mm])
        sign_table.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (-1, -1), font_name),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ]))
        elements.append(sign_table)

        doc.build(elements)
        buffer.seek(0)
        pdf_bytes = buffer.getvalue()
        logger.info("PDF built, size=%d bytes", len(pdf_bytes))
        return pdf_bytes
    except Exception as e:
        logger.exception("build_pdf_bytes_from_row error: %s", e)
        return None

# ---------------- HTML builder ----------------
def build_html_bytes_from_row(row: Dict[str, Any]) -> bytes:
    style = """
<style>
@page { size: A4; margin:20mm; }
body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial; color:#111; margin:0; padding:0; }
.container { width:210mm; padding:12mm; box-sizing:border-box; }
.header { display:flex; justify-content:space-between; align-items:flex-start; }
.h-title { text-align:center; margin-top:6px; }
.small { color:#555; font-size:12px; }
.table { width:100%; border-collapse:collapse; margin-top:12px; }
.table th, .table td { border:1px solid #ddd; padding:8px; font-size:13px; }
.table thead th { background:#f4f7fb; font-weight:600; text-align:center; }
.right { text-align:right; }
.sig { display:flex; justify-content:space-between; margin-top:40px; }
.signbox { width:30%; text-align:center; }
</style>
"""
    html = f"""<!doctype html>
<html>
<head>
<meta charset="utf-8">
<title>B·∫£ng k√™ 01/TNDN</title>
{style}
</head>
<body>
<div class="container">
  <div class="header">
    <div>
      <div><strong>C·ªòNG H√íA X√É H·ªòI CH·ª¶ NGHƒ®A VI·ªÜT NAM</strong></div>
      <div class="small">ƒê·ªôc l·∫≠p - T·ª± do - H·∫°nh ph√∫c</div>
    </div>
    <div class="small">M·∫´u s·ªë: 01/TNDN<br><em>(Ban h√†nh k√®m theo Th√¥ng t∆∞ 78/2014/TT-BTC)</em></div>
  </div>

  <h2 class="h-title">B·∫¢NG K√ä THU MUA H√ÄNG H√ìA, D·ªäCH V·ª§ MUA V√ÄO KH√îNG C√ì H√ìA ƒê∆†N</h2>

  {"<p><strong>ƒê∆°n v·ªã:</strong> " + row.get('don_vi','') + " &nbsp;&nbsp; <strong>MST:</strong> " + row.get('mst','') + "</p>" if row.get('don_vi') else ""}
  <p class="small"><strong>ƒê·ªãa ƒëi·ªÉm thu mua:</strong> {row.get('dia_diem','')} &nbsp;&nbsp; <strong>Ng∆∞·ªùi ph·ª• tr√°ch:</strong> {row.get('phu_trach','')}</p>
  <p class="small"><strong>Ng√†y l·∫≠p:</strong> {row.get('ngay_lap','')}</p>

  <h4>Th√¥ng tin ng∆∞·ªùi b√°n</h4>
  <p><strong>H·ªç v√† t√™n:</strong> {row.get('ho_va_ten','')}<br>
  <strong>S·ªë CCCD:</strong> {row.get('so_cccd','')}<br>
  <strong>Qu√™ qu√°n:</strong> {row.get('que_quan','')}</p>

  <table class="table" role="table" aria-label="Chi ti·∫øt giao d·ªãch">
    <thead>
      <tr>
        <th>STT</th><th>T√™n h√†ng/d·ªãch v·ª•</th><th>ƒêVT</th><th>S·ªë l∆∞·ª£ng</th><th>ƒê∆°n gi√° (VNƒê)</th><th>Th√†nh ti·ªÅn (VNƒê)</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="right">1</td>
        <td>{row.get('mieu_ta','H√†ng h√≥a')}</td>
        <td class="right">{row.get('don_vi_unit','')}</td>
        <td class="right">{row.get('so_luong','')}</td>
        <td class="right">{fmt_money(row.get('don_gia',0))}</td>
        <td class="right">{fmt_money(row.get('thanh_tien',0))}</td>
      </tr>
    </tbody>
  </table>

  <p class="right"><strong>T·ªïng c·ªông: {fmt_money(row.get('thanh_tien',0))} VNƒê</strong></p>
  <p><strong>S·ªë ti·ªÅn b·∫±ng ch·ªØ:</strong> {to_words_vnd(row.get('thanh_tien',0))}</p>

  <div class="sig">
    <div class="signbox">Ng∆∞·ªùi l·∫≠p b·∫£ng k√™<br/>(K√Ω, ghi r√µ h·ªç t√™n)</div>
    <div class="signbox">Ng∆∞·ªùi b√°n<br/>(K√Ω, ghi r√µ h·ªç t√™n)</div>
    <div class="signbox">Th·ªß tr∆∞·ªüng ƒë∆°n v·ªã<br/>(K√Ω, ƒë√≥ng d·∫•u)</div>
  </div>

</div>
</body>
</html>
"""
    return html.encode('utf-8')

# ---------------- Core process & save ----------------
def process_transaction_and_build(ho_va_ten: str, so_cccd: str, que_quan: str,
                                  so_luong_str: str, don_gia_str: str,
                                  don_vi_unit: str = "ch·ªâ", mieu_ta: str = "H√†ng h√≥a",
                                  don_vi_name: str = "", mst: str = "", dia_chi: str = "",
                                  dia_diem: str = DEFAULT_DIA_DIEM, phu_trach: str = "") -> Tuple[Dict[str, Any], Optional[bytes], bytes]:
    if not ho_va_ten or ho_va_ten.strip() == "":
        raise ValueError("H·ªç v√† t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
    if not so_luong_str or so_luong_str.strip() == "":
        raise ValueError("Kh·ªëi l∆∞·ª£ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
    if not don_gia_str or don_gia_str.strip() == "":
        raise ValueError("ƒê∆°n gi√° kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")

    so_luong = safe_float_from_str(so_luong_str)
    don_gia = safe_float_from_str(don_gia_str)
    if so_luong <= 0:
        raise ValueError("Kh·ªëi l∆∞·ª£ng ph·∫£i > 0.")
    if don_gia <= 0:
        raise ValueError("ƒê∆°n gi√° ph·∫£i > 0.")

    thanh_tien = so_luong * don_gia
    ngay_display = now_local_str("%d/%m/%Y")
    time_iso = now_iso()

    row_csv = {
        "Th·ªùi gian": time_iso,
        "ƒê∆°n v·ªã b√°n h√†ng": don_vi_name,
        "MST": mst,
        "ƒê·ªãa ch·ªâ ƒë∆°n v·ªã": dia_chi,
        "ƒê·ªãa ƒëi·ªÉm thu mua": dia_diem,
        "Ng∆∞·ªùi ph·ª• tr√°ch": phu_trach,
        "H·ªç v√† T√™n": ho_va_ten,
        "S·ªë CCCD": str(so_cccd),
        "Qu√™ qu√°n": que_quan,
        "Kh·ªëi l∆∞·ª£ng": so_luong,
        "ƒê∆°n v·ªã t√≠nh": don_vi_unit,
        "ƒê∆°n gi√°": don_gia,
        "Th√†nh ti·ªÅn": thanh_tien
    }
    append_history_row(row_csv)

    row = {
        "don_vi": don_vi_name,
        "mst": mst,
        "dia_chi": dia_chi,
        "dia_diem": dia_diem,
        "phu_trach": phu_trach,
        "ngay_lap": ngay_display,
        "ho_va_ten": ho_va_ten,
        "so_cccd": str(so_cccd),
        "que_quan": que_quan,
        "so_luong": so_luong,
        "don_gia": don_gia,
        "thanh_tien": thanh_tien,
        "don_vi_unit": don_vi_unit,
        "mieu_ta": mieu_ta
    }

    pdf_bytes = None
    try:
        pdf_bytes = build_pdf_bytes_from_row(row)
    except Exception as e:
        logger.exception("Error building PDF: %s", e)
        pdf_bytes = None

    html_bytes = build_html_bytes_from_row(row)
    return row, pdf_bytes, html_bytes

# ---------------- UI ----------------
st.title(APP_TITLE)
st.markdown("Ch·ª•p/t·∫£i ·∫£nh CCCD v√† c√¢n ‚Üí app t·ª± OCR ‚Üí t·∫°o b·∫£n k√™ m·∫´u 01/TNDN ‚Üí preview & t·∫£i PDF/HTML. Ki·ªÉm tra OCR tr∆∞·ªõc khi in.")

top_cols = st.columns([1,3,1])
with top_cols[0]:
    if st.button("L√†m m·ªõi"):
        st.rerun()
with top_cols[1]:
    st.markdown("**H∆∞·ªõng d·∫´n:** Ch·ª•p CCCD b·∫±ng camera ho·∫∑c t·∫£i ·∫£nh; ch·ª•p m√†n h√¨nh c√¢n; ch·ªânh n·∫øu OCR ch∆∞a ch√≠nh x√°c; b·∫•m `T·∫°o b·∫£n k√™`.")
with top_cols[2]:
    if REPORTLAB_OK:
        st.success("ReportLab: available ‚Äî PDF s·∫Ω ƒë∆∞·ª£c t·∫°o")
    else:
        st.warning("ReportLab: not available ‚Äî PDF kh√¥ng th·ªÉ t·∫°o, s·ª≠ d·ª•ng HTML")

with st.expander("Th√¥ng tin ƒë∆°n v·ªã (tu·ª≥ ch·ªçn)"):
    don_vi_name = st.text_input("T√™n ƒë∆°n v·ªã")
    mst = st.text_input("M√£ s·ªë thu·∫ø (MST)")
    dia_chi = st.text_input("ƒê·ªãa ch·ªâ ƒë∆°n v·ªã")
    dia_diem = st.text_input("ƒê·ªãa ƒëi·ªÉm thu mua", value=DEFAULT_DIA_DIEM)
    phu_trach = st.text_input("Ng∆∞·ªùi ph·ª• tr√°ch thu mua")

if 'ho_ten' not in st.session_state: st.session_state.ho_ten = ""
if 'so_cccd' not in st.session_state: st.session_state.so_cccd = ""
if 'que_quan' not in st.session_state: st.session_state.que_quan = ""
if 'so_luong' not in st.session_state: st.session_state.so_luong = ""

st.header("1) Th√¥ng tin ng∆∞·ªùi b√°n (CCCD)")
col1, col2 = st.columns(2)
with col1:
    st.subheader("OCR CCCD ‚Äî ch·ª•p ho·∫∑c t·∫£i ·∫£nh")
    up_cccd = st.file_uploader("T·∫£i ·∫£nh CCCD (JPG/PNG)", type=['jpg','jpeg','png'])
    cam_cccd = st.camera_input("Ho·∫∑c ch·ª•p b·∫±ng camera")
    chosen_cccd = cam_cccd if cam_cccd is not None else up_cccd
    if chosen_cccd:
        try:
            ho, so, que = trich_xuat_cccd_from_uploaded(chosen_cccd)
            if ho:
                st.session_state.ho_ten = ho
            if so:
                st.session_state.so_cccd = so
            if que:
                st.session_state.que_quan = que
            st.success("ƒê√£ tr√≠ch xu·∫•t (ki·ªÉm tra v√† ch·ªânh n·∫øu c·∫ßn).")
        except Exception as e:
            logger.exception("OCR CCCD error: %s", e)
            st.error("L·ªói OCR CCCD: " + str(e))
with col2:
    st.subheader("Nh·∫≠p/ch·ªânh tay")
    ho_va_ten = st.text_input("H·ªç v√† t√™n", value=st.session_state.ho_ten)
    so_cccd = st.text_input("S·ªë CCCD/CMND (chu·ªói)", value=st.session_state.so_cccd)
    que_quan = st.text_input("Qu√™ qu√°n", value=st.session_state.que_quan)

st.markdown("---")
st.header("2) Th√¥ng tin giao d·ªãch (c√¢n)")
col3, col4 = st.columns(2)
with col3:
    st.subheader("OCR c√¢n ‚Äî ch·ª•p/t·∫£i ·∫£nh m√†n h√¨nh c√¢n")
    up_can = st.file_uploader("T·∫£i ·∫£nh c√¢n (JPG/PNG)", type=['jpg','jpeg','png'], key="up_can")
    cam_can = st.camera_input("Ho·∫∑c ch·ª•p c√¢n b·∫±ng camera", key="cam_can")
    chosen_can = cam_can if cam_can is not None else up_can
    if chosen_can:
        try:
            so_luong_ex = trich_xuat_can_from_uploaded(chosen_can)
            if so_luong_ex:
                st.session_state.so_luong = so_luong_ex
            st.success("ƒê√£ tr√≠ch xu·∫•t kh·ªëi l∆∞·ª£ng (ki·ªÉm tra v√† ch·ªânh n·∫øu c·∫ßn).")
        except Exception as e:
            logger.exception("OCR c√¢n error: %s", e)
            st.error("L·ªói OCR c√¢n: " + str(e))
with col4:
    st.subheader("Nh·∫≠p/ch·ªânh tay")
    so_luong_input = st.text_input("Kh·ªëi l∆∞·ª£ng", value=str(st.session_state.so_luong))
    don_gia_input = st.text_input("ƒê∆°n gi√° (VNƒê)", value="1000000")
    don_vi_unit = st.text_input("ƒê∆°n v·ªã t√≠nh (v√≠ d·ª•: ch·ªâ, kg)", value="ch·ªâ")
    mieu_ta = st.text_input("M√¥ t·∫£ h√†ng (VD: V√†ng mi·∫øng...)", value="H√†ng h√≥a")

st.markdown("---")
st.header("3) T·∫°o b·∫£n k√™, Preview & T·∫£i")
colA, colB = st.columns([2,1])
with colA:
    if st.button("T·∫°o b·∫£n k√™ (T√≠nh & L∆∞u)"):
        try:
            ho_final = ho_va_ten.strip() if ho_va_ten and ho_va_ten.strip() != "" else st.session_state.ho_ten
            so_cccd_final = so_cccd.strip() if so_cccd and so_cccd.strip() != "" else st.session_state.so_cccd
            que_quan_final = que_quan.strip() if que_quan and que_quan.strip() != "" else st.session_state.que_quan

            row, pdf_bytes, html_bytes = process_transaction_and_build(
                ho_va_ten=ho_final,
                so_cccd=so_cccd_final,
                que_quan=que_quan_final,
                so_luong_str=so_luong_input,
                don_gia_str=don_gia_input,
                don_vi_unit=don_vi_unit,
                mieu_ta=mieu_ta,
                don_vi_name=don_vi_name,
                mst=mst,
                dia_chi=dia_chi,
                dia_diem=dia_diem,
                phu_trach=phu_trach
            )
            st.success("ƒê√£ l∆∞u giao d·ªãch v√†o l·ªãch s·ª≠.")
            if pdf_bytes:
                st.markdown("**Xem tr∆∞·ªõc PDF (n·∫øu tr√¨nh duy·ªát h·ªó tr·ª£):**", unsafe_allow_html=True)
                try:
                    b64 = base64.b64encode(pdf_bytes).decode('utf-8')
                    embed_html = f'<embed src="data:application/pdf;base64,{b64}" width="100%" height="700px" type="application/pdf">'
                    st.components.v1.html(embed_html, height=720)
                except Exception as e:
                    logger.warning("PDF embed failed: %s", e)
                    st.info("Tr√¨nh duy·ªát ch·∫∑n nh√∫ng PDF. Vui l√≤ng t·∫£i PDF xu·ªëng.")
                st.download_button("üì• T·∫£i PDF (A4)", data=pdf_bytes,
                                   file_name=f"bangke_01_TNDN_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                                   mime="application/pdf")
            else:
                st.warning("PDF kh√¥ng t·∫°o ƒë∆∞·ª£c ‚Äî hi·ªÉn th·ªã HTML (in b·∫±ng tr√¨nh duy·ªát).")
                st.components.v1.html(html_bytes.decode('utf-8'), height=720)
                st.download_button("üì• T·∫£i HTML", data=html_bytes,
                                   file_name=f"bangke_01_TNDN_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html",
                                   mime="text/html")
            st.metric("Th√†nh ti·ªÅn (VNƒê)", fmt_money(row.get('thanh_tien', 0)))
            st.write("S·ªë ti·ªÅn b·∫±ng ch·ªØ:", to_words_vnd(row.get('thanh_tien', 0)))
        except Exception as e:
            logger.exception("Create error: %s", e)
            st.error("L·ªói khi t·∫°o b·∫£n k√™: " + str(e))
with colB:
    st.info("Ghi ch√∫:\n- N·∫øu PDF hi·ªÉn th·ªã d·∫•u l·∫°, h√£y ƒë·∫∑t DejaVuSans.ttf v√†o folder v√† ch·∫°y l·∫°i.\n- N·∫øu tr√¨nh duy·ªát ch·∫∑n iframe, t·∫£i file PDF/HTML r·ªìi m·ªü b·∫±ng tr√¨nh xem file c·ª•c b·ªô.")

st.markdown("---")
st.header("4) L·ªãch s·ª≠ giao d·ªãch")
try:
    df_hist = read_history_df()
    if df_hist.empty:
        st.info("Ch∆∞a c√≥ giao d·ªãch.")
    else:
        st.dataframe(df_hist.sort_values("Th·ªùi gian", ascending=False).head(500))
        st.download_button("T·∫£i l·ªãch s·ª≠ (CSV)", data=df_hist.to_csv(index=False).encode('utf-8'),
                           file_name="lich_su_giao_dich.csv", mime="text/csv")
except Exception as e:
    logger.exception("History display error: %s", e)
    st.error("Kh√¥ng th·ªÉ ƒë·ªçc l·ªãch s·ª≠: " + str(e))

st.markdown("---")
st.caption("N·∫øu mu·ªën m√¨nh th√™m: logo tr√™n PDF, nhi·ªÅu d√≤ng h√†ng, xu·∫•t Excel, l∆∞u v√†o DB (SQLite/Postgres), ho·∫∑c UI n√¢ng cao ‚Äî m√¨nh l√†m ti·∫øp.")
