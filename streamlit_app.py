# app.py
import streamlit as st
import cv2
import numpy as np
import pandas as pd
from datetime import datetime
import os
import pytz
from paddleocr import PaddleOCR
import io
import base64

# c·ªë g·∫Øng import reportlab (PDF). N·∫øu kh√¥ng c√≥, b√°o v√† fallback sang HTML.
try:
    from reportlab.lib.pagesizes import A4
    from reportlab.pdfgen import canvas
    from reportlab.lib.units import mm
    from reportlab.pdfbase import pdfmetrics
    from reportlab.pdfbase.ttfonts import TTFont
    REPORTLAB_OK = True
except Exception:
    REPORTLAB_OK = False

# --- C·∫•u h√¨nh ---
st.set_page_config(page_title="B·∫£ng k√™ 01/TNDN", layout="wide", page_icon="üìÑ")

# File l∆∞u l·ªãch s·ª≠
LICH_SU_FILE = "lich_su_giao_dich.csv"
if not os.path.exists(LICH_SU_FILE):
    df_empty = pd.DataFrame(columns=[
        "Th·ªùi gian", "ƒê∆°n v·ªã b√°n h√†ng", "MST", "ƒê·ªãa ch·ªâ ƒë∆°n v·ªã",
        "ƒê·ªãa ƒëi·ªÉm thu mua", "Ng∆∞·ªùi ph·ª• tr√°ch",
        "H·ªç v√† T√™n", "S·ªë CCCD", "Qu√™ qu√°n",
        "Kh·ªëi l∆∞·ª£ng", "ƒê∆°n v·ªã t√≠nh", "ƒê∆°n gi√°", "Th√†nh ti·ªÅn"
    ])
    df_empty.to_csv(LICH_SU_FILE, index=False)

# --- OCR init ---
@st.cache_resource
def get_ocr():
    # PaddleOCR ti·∫øng Vi·ªát
    return PaddleOCR(lang="vi", use_angle_cls=False)
ocr = get_ocr()

# --- Ti·ªán √≠ch ---
def img_from_upload(uploaded_file):
    if uploaded_file is None:
        return None
    file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
    img = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)
    return img

# chuy·ªÉn s·ªë th√†nh ch·ªØ (VNƒê) - ƒë·ªß d√πng
dv_words = ['kh√¥ng','m·ªôt','hai','ba','b·ªën','nƒÉm','s√°u','b·∫£y','t√°m','ch√≠n']
def read3(n):
    s=''; n=int(n)
    tr, ch, d = n//100, (n%100)//10, n%10
    if tr>0:
        s += dv_words[tr]+' trƒÉm'
        if ch==0 and d>0: s+=' linh'
    if ch>1:
        s += (' ' if s else '')+dv_words[ch]+' m∆∞∆°i'
        if d==1: s+=' m·ªët'
        elif d==5: s+=' lƒÉm'
        elif d>0: s+=' '+dv_words[d]
    elif ch==1:
        s += (' ' if s else '')+'m∆∞·ªùi'
        if d==5: s+=' lƒÉm'
        elif d>0: s+=' '+dv_words[d]
    elif ch==0 and d>0:
        s += (' ' if s else '')+dv_words[d]
    return s.strip()

def to_words_vnd(num):
    num = int(round(num))
    if num <= 0:
        return "Kh√¥ng ƒë·ªìng"
    units = ['',' ngh√¨n',' tri·ªáu',' t·ª∑',' ngh√¨n t·ª∑',' tri·ªáu t·ª∑']
    out=[]; i=0
    while num>0 and i < len(units):
        chunk = num % 1000
        if chunk>0:
            out.insert(0, (read3(chunk) + units[i]).strip())
        num//=1000; i+=1
    s = ' '.join(out).strip()
    s = s[0].upper()+s[1:]+' ƒë·ªìng'
    return s

def fmt_money(v):
    try:
        return f"{int(round(v)):,}".replace(',', '.')
    except:
        return "0"

# --- OCR tr√≠ch xu·∫•t ---
def trich_xuat_cccd_from_image(img):
    """Tr·∫£ v·ªÅ ho_ten, so_cccd, que_quan (c√≥ th·ªÉ r·ªóng n·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c)."""
    try:
        res = ocr.ocr(img, cls=False)
    except Exception:
        return "", "", ""
    if not res or not res[0]:
        return "", "", ""
    lines = res[0]
    ho_ten = so_cccd = que_quan = ""
    for i, ln in enumerate(lines):
        text = ln[1][0].strip()
        up = text.upper()
        if "H·ªå V√Ä T√äN" in up or "H·ªå T√äN" in up:
            if i+1 < len(lines):
                ho_ten = lines[i+1][1][0].strip()
        if "S·ªê" in up and any(tok.isdigit() and len(tok)==12 for tok in up.split()):
            for tok in up.split():
                if tok.isdigit() and len(tok)==12:
                    so_cccd = tok
                    break
        if "QU√ä QU√ÅN" in up:
            if i+1 < len(lines):
                que_quan = lines[i+1][1][0].strip()
    # fallback: t√¨m token 12 ch·ªØ s·ªë ·ªü b·∫•t k·ª≥ d√≤ng n√†o
    if not so_cccd:
        for ln in lines:
            txt = ln[1][0]
            digits = ''.join(ch for ch in txt if ch.isdigit())
            if len(digits) >= 12:
                so_cccd = digits[:12]; break
    return ho_ten, so_cccd, que_quan

def trich_xuat_can_from_image(img):
    """Tr√≠ch s·ªë t·ª´ ·∫£nh c√¢n (l·∫•y chu·ªói s·ªë/decimal ƒë·∫ßu ti√™n)."""
    try:
        res = ocr.ocr(img, cls=False)
    except Exception:
        return ""
    if not res or not res[0]:
        return ""
    for ln in res[0]:
        txt = ln[1][0]
        cleaned = ''.join(ch for ch in txt if ch.isdigit() or ch in '.,')
        if any(ch.isdigit() for ch in cleaned):
            cleaned = cleaned.replace(',', '.')
            parts = cleaned.split('.')
            if len(parts) > 2:
                cleaned = ''.join(parts[:-1]) + '.' + parts[-1]
            return cleaned
    return ""

# --- T·∫°o PDF (reportlab) ---
def create_pdf_bytes(row):
    """
    row: dict g·ªìm c√°c tr∆∞·ªùng c·∫ßn thi·∫øt.
    Tr·∫£ v·ªÅ bytes PDF ho·∫∑c None n·∫øu l·ªói / kh√¥ng c√≥ reportlab.
    """
    if not REPORTLAB_OK:
        return None
    # ƒëƒÉng k√Ω font DejaVu n·∫øu c√≥ (h·ªó tr·ª£ ti·∫øng Vi·ªát)
    try:
        pdfmetrics.registerFont(TTFont('DejaVu', 'DejaVuSans.ttf'))
        font_name = 'DejaVu'
    except Exception:
        font_name = 'Helvetica'

    buffer = io.BytesIO()
    c = canvas.Canvas(buffer, pagesize=A4)
    w, h = A4
    left = 18*mm
    right = 18*mm
    cur_y = h - 18*mm

    # Header
    c.setFont(font_name, 10)
    c.drawString(left, cur_y, "C·ªòNG H√íA X√É H·ªòI CH·ª¶ NGHƒ®A VI·ªÜT NAM")
    c.drawRightString(w - right, cur_y, "M·∫´u s·ªë: 01/TNDN")
    cur_y -= 12
    c.setFont(font_name, 9)
    c.drawString(left, cur_y, "ƒê·ªôc l·∫≠p - T·ª± do - H·∫°nh ph√∫c")
    c.drawRightString(w - right, cur_y, "(Ban h√†nh k√®m theo Th√¥ng t∆∞ 78/2014/TT-BTC)")
    cur_y -= 18

    c.setFont(font_name, 13)
    c.drawCentredString(w/2, cur_y, "B·∫¢NG K√ä THU MUA H√ÄNG H√ìA, D·ªäCH V·ª§ MUA V√ÄO KH√îNG C√ì H√ìA ƒê∆†N")
    cur_y -= 20

    # Th√¥ng tin ƒë∆°n v·ªã (n·∫øu c√≥)
    c.setFont(font_name, 10)
    if row.get('don_vi'):
        c.drawString(left, cur_y, f"ƒê∆°n v·ªã: {row.get('don_vi')}")
        cur_y -= 12
    if row.get('mst'):
        c.drawString(left, cur_y, f"MST: {row.get('mst')}")
        cur_y -= 12
    if row.get('dia_chi'):
        c.drawString(left, cur_y, f"ƒê·ªãa ch·ªâ: {row.get('dia_chi')}")
        cur_y -= 12
    cur_y -= 6

    # Th√¥ng tin thu mua
    c.drawString(left, cur_y, f"ƒê·ªãa ƒëi·ªÉm thu mua: {row.get('dia_diem','')}")
    cur_y -= 12
    c.drawString(left, cur_y, f"Ng∆∞·ªùi ph·ª• tr√°ch: {row.get('phu_trach','')}")
    cur_y -= 12
    c.drawString(left, cur_y, f"Ng√†y l·∫≠p b·∫£ng k√™: {row.get('ngay_lap','')}")
    cur_y -= 18

    # Th√¥ng tin ng∆∞·ªùi b√°n
    c.setFont(font_name, 11)
    c.drawString(left, cur_y, "Th√¥ng tin ng∆∞·ªùi b√°n:")
    cur_y -= 14
    c.setFont(font_name, 10)
    c.drawString(left+6*mm, cur_y, f"H·ªç v√† t√™n: {row.get('ho_va_ten','')}")
    cur_y -= 12
    c.drawString(left+6*mm, cur_y, f"S·ªë CCCD/CMND: {row.get('so_cccd','')}")
    cur_y -= 12
    c.drawString(left+6*mm, cur_y, f"Qu√™ qu√°n: {row.get('que_quan','')}")
    cur_y -= 18

    # B·∫£ng chi ti·∫øt (1 d√≤ng)
    headers = ["STT","T√™n h√†ng/d·ªãch v·ª•","ƒêVT","S·ªë l∆∞·ª£ng","ƒê∆°n gi√° (VNƒê)","Th√†nh ti·ªÅn (VNƒê)"]
    col_w = [18*mm, 70*mm, 20*mm, 26*mm, 35*mm, 40*mm]
    x = left
    c.setFont(font_name, 9)
    for i, h in enumerate(headers):
        c.rect(x, cur_y-14, col_w[i], 16, stroke=1, fill=0)
        c.drawCentredString(x + col_w[i]/2, cur_y-10, h)
        x += col_w[i]
    cur_y -= 18

    # Row
    x = left
    c.rect(x, cur_y-12, col_w[0], 14, stroke=1)
    c.drawCentredString(x + col_w[0]/2, cur_y-8, "1"); x += col_w[0]

    c.rect(x, cur_y-12, col_w[1], 14, stroke=1)
    c.drawString(x+4, cur_y-10, row.get('mieu_ta','H√†ng h√≥a')); x += col_w[1]

    c.rect(x, cur_y-12, col_w[2], 14, stroke=1)
    c.drawCentredString(x+col_w[2]/2, cur_y-8, row.get('don_vi_unit','')); x += col_w[2]

    c.rect(x, cur_y-12, col_w[3], 14, stroke=1)
    c.drawCentredString(x+col_w[3]/2, cur_y-8, str(row.get('so_luong',''))); x += col_w[3]

    c.rect(x, cur_y-12, col_w[4], 14, stroke=1)
    c.drawRightString(x+col_w[4]-4, cur_y-8, fmt_money(row.get('don_gia',0))); x += col_w[4]

    c.rect(x, cur_y-12, col_w[5], 14, stroke=1)
    c.drawRightString(x+col_w[5]-4, cur_y-8, fmt_money(row.get('thanh_tien',0)))
    cur_y -= 28

    # T·ªïng v√† b·∫±ng ch·ªØ
    c.drawRightString(w - right, cur_y, "T·ªïng c·ªông: " + fmt_money(row.get('thanh_tien',0)) + " VNƒê")
    cur_y -= 14
    c.drawString(left, cur_y, "S·ªë ti·ªÅn b·∫±ng ch·ªØ: " + to_words_vnd(row.get('thanh_tien',0)))
    cur_y -= 28

    # Ch·ªØ k√Ω
    c.drawString(left, cur_y, f"{row.get('dia_diem','')}, ng√†y {row.get('ngay_lap','')}")
    c.drawString(left+6*mm, cur_y-18, "Ng∆∞·ªùi l·∫≠p b·∫£ng k√™")
    c.drawString(w/2, cur_y-18, "Ng∆∞·ªùi b√°n")
    c.drawString(w - right - 80*mm, cur_y-18, "Th·ªß tr∆∞·ªüng ƒë∆°n v·ªã")
    # lines for signature
    c.line(left, cur_y-60, left+60*mm, cur_y-60)
    c.line(w/2, cur_y-60, w/2+60*mm, cur_y-60)
    c.line(w - right - 80*mm, cur_y-60, w - right + 10*mm, cur_y-60)

    c.showPage()
    c.save()
    buffer = buffer = io.BytesIO()
    buffer.seek(0)
    return buffer.getvalue()

# --- T·∫°o HTML fallback ---
def create_html(row):
    html = f"""<!doctype html>
<html><head><meta charset="utf-8"><title>B·∫£ng k√™ 01/TNDN</title>
<style>
body{{font-family:Arial, Helvetica, sans-serif; color:#111; padding:16px}}
h2{{text-align:center}}
.table{{width:100%;border-collapse:collapse;margin-top:8px}}
.table, .table th, .table td{{border:1px solid #ddd}}
.table th, .table td{{padding:6px}}
.right{{text-align:right}}
.mono{{font-family:monospace}}
</style>
</head><body>
<p><strong>C·ªòNG H√íA X√É H·ªòI CH·ª¶ NGHƒ®A VI·ªÜT NAM</strong> <span style="float:right">M·∫´u s·ªë: 01/TNDN</span></p>
<p><em>ƒê·ªôc l·∫≠p - T·ª± do - H·∫°nh ph√∫c</em></p>
<h2>B·∫¢NG K√ä THU MUA H√ÄNG H√ìA, D·ªäCH V·ª§ MUA V√ÄO KH√îNG C√ì H√ìA ƒê∆†N</h2>
{('<p><strong>ƒê∆°n v·ªã:</strong> '+row.get('don_vi','')+' &nbsp;&nbsp; <strong>MST:</strong> '+row.get('mst','')+'</p>') if row.get('don_vi') else ''}
<p><strong>ƒê·ªãa ƒëi·ªÉm thu mua:</strong> {row.get('dia_diem','')} &nbsp;&nbsp; <strong>Ng∆∞·ªùi ph·ª• tr√°ch:</strong> {row.get('phu_trach','')}</p>
<p><strong>Ng√†y l·∫≠p:</strong> {row.get('ngay_lap','')}</p>
<table class="table">
<thead><tr><th>STT</th><th>T√™n h√†ng/d·ªãch v·ª•</th><th>ƒêVT</th><th>S·ªë l∆∞·ª£ng</th><th>ƒê∆°n gi√° (VNƒê)</th><th>Th√†nh ti·ªÅn (VNƒê)</th></tr></thead>
<tbody>
<tr><td>1</td><td>{row.get('mieu_ta','H√†ng h√≥a')}</td><td>{row.get('don_vi_unit','')}</td><td class="right">{row.get('so_luong','')}</td><td class="right">{fmt_money(row.get('don_gia',0))}</td><td class="right">{fmt_money(row.get('thanh_tien',0))}</td></tr>
</tbody>
</table>
<p class="right"><strong>T·ªïng c·ªông: {fmt_money(row.get('thanh_tien',0))} VNƒê</strong></p>
<p><strong>S·ªë ti·ªÅn b·∫±ng ch·ªØ:</strong> {to_words_vnd(row.get('thanh_tien',0))}</p>
<p>{row.get('dia_diem','')}, ng√†y {row.get('ngay_lap','')}</p>
<table style="width:100%;border:none;margin-top:40px"><tr><td style="text-align:center">Ng∆∞·ªùi l·∫≠p b·∫£ng k√™<br>(K√Ω, ghi r√µ h·ªç t√™n)</td><td style="text-align:center">Ng∆∞·ªùi b√°n<br>(K√Ω, ghi r√µ h·ªç t√™n)</td><td style="text-align:center">Th·ªß tr∆∞·ªüng ƒë∆°n v·ªã<br>(K√Ω, ƒë√≥ng d·∫•u)</td></tr></table>
</body></html>
"""
    return html.encode('utf-8')

# --- X·ª≠ l√Ω v√† l∆∞u giao d·ªãch ---
def process_and_save(ho_va_ten, so_cccd, que_quan, so_luong_str, don_gia_str,
                     don_vi_unit='ch·ªâ', mieu_ta='H√†ng h√≥a',
                     don_vi_name='', mst='', dia_chi='', dia_diem='B·∫øn L·ª©c', phu_trach=''):
    try:
        so_luong = float(str(so_luong_str).replace(',', '.'))
    except:
        raise ValueError("Kh·ªëi l∆∞·ª£ng kh√¥ng h·ª£p l·ªá")
    # x·ª≠ l√Ω don_gia (lo·∫°i d·∫•u ch·∫•m/ph·∫©y ph√¢n t√°ch)
    s = str(don_gia_str).replace(' ', '')
    s = s.replace('.', '').replace(',', '') if ('.' in s and ',' in s and s.find('.') < s.find(',')) else s
    s = s.replace('.', '').replace(',', '') if (',' in s and s.find(',') > s.find('.')) else s
    try:
        don_gia = float(s)
    except:
        try:
            don_gia = float(str(don_gia_str).replace(',', ''))
        except:
            raise ValueError("ƒê∆°n gi√° kh√¥ng h·ª£p l·ªá")
    thanh_tien = so_luong * don_gia

    vn_tz = pytz.timezone("Asia/Ho_Chi_Minh")
    now = datetime.now(vn_tz)
    ngay_display = now.strftime("%d/%m/%Y")
    thoi_gian_iso = now.strftime("%Y-%m-%d %H:%M:%S")

    # l∆∞u l·ªãch s·ª≠
    df_row = pd.DataFrame([{
        "Th·ªùi gian": thoi_gian_iso,
        "ƒê∆°n v·ªã b√°n h√†ng": don_vi_name,
        "MST": mst,
        "ƒê·ªãa ch·ªâ ƒë∆°n v·ªã": dia_chi,
        "ƒê·ªãa ƒëi·ªÉm thu mua": dia_diem,
        "Ng∆∞·ªùi ph·ª• tr√°ch": phu_trach,
        "H·ªç v√† T√™n": ho_va_ten,
        "S·ªë CCCD": so_cccd,
        "Qu√™ qu√°n": que_quan,
        "Kh·ªëi l∆∞·ª£ng": so_luong,
        "ƒê∆°n v·ªã t√≠nh": don_vi_unit,
        "ƒê∆°n gi√°": don_gia,
        "Th√†nh ti·ªÅn": thanh_tien
    }])
    df_row.to_csv(LICH_SU_FILE, mode='a', header=False, index=False)

    row = {
        "don_vi": don_vi_name,
        "mst": mst,
        "dia_chi": dia_chi,
        "dia_diem": dia_diem,
        "phu_trach": phu_trach,
        "ngay_lap": ngay_display,
        "ho_va_ten": ho_va_ten,
        "so_cccd": so_cccd,
        "que_quan": que_quan,
        "so_luong": so_luong,
        "don_gia": don_gia,
        "thanh_tien": thanh_tien,
        "don_vi_unit": don_vi_unit,
        "mieu_ta": mieu_ta
    }
    return row

# --- Giao di·ªán Streamlit ---
st.title("üìÑ B·∫¢NG K√ä 01/TNDN ‚Äî T·ª± ƒë·ªông (OCR CCCD + C√¢n)")
st.markdown("Nh·∫≠p/ch·ª•p ·∫£nh CCCD v√† ·∫£nh c√¢n ‚Üí T·∫°o b·∫£n k√™ theo m·∫´u 01/TNDN. ·ª®ng d·ª•ng s·∫Ω hi·ªÉn th·ªã PDF ƒë·ªÉ in n·∫øu c√≥ th·ªÉ; n·∫øu kh√¥ng c√≥ PDF, t·∫£i HTML ƒë·ªÉ in t·ª´ tr√¨nh duy·ªát.")

# Th√¥ng tin ƒë∆°n v·ªã (t√πy ch·ªçn)
with st.expander("Th√¥ng tin ƒë∆°n v·ªã (t√πy ch·ªçn)"):
    don_vi_name = st.text_input("T√™n ƒë∆°n v·ªã (ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng c√≥)")
    mst = st.text_input("M√£ s·ªë thu·∫ø (MST)")
    dia_chi = st.text_input("ƒê·ªãa ch·ªâ ƒë∆°n v·ªã")
    dia_diem = st.text_input("ƒê·ªãa ƒëi·ªÉm thu mua", value="B·∫øn L·ª©c")
    phu_trach = st.text_input("Ng∆∞·ªùi ph·ª• tr√°ch thu mua")

st.markdown("---")
# session state kh·ªüi t·∫°o
if 'ho_ten' not in st.session_state: st.session_state.ho_ten = ""
if 'so_cccd' not in st.session_state: st.session_state.so_cccd = ""
if 'que_quan' not in st.session_state: st.session_state.que_quan = ""
if 'so_luong' not in st.session_state: st.session_state.so_luong = ""

st.header("1) Th√¥ng tin ng∆∞·ªùi b√°n (kh√°ch h√†ng)")
col1, col2 = st.columns(2)
with col1:
    st.subheader("OCR t·ª´ CCCD")
    up_cccd = st.file_uploader("T·∫£i ·∫£nh CCCD (JPG/PNG) ho·∫∑c ch·ª•p", type=['jpg','jpeg','png'])
    if up_cccd:
        img = img_from_upload(up_cccd)
        ho, so, que = trich_xuat_cccd_from_image(img)
        st.session_state.ho_ten = ho or st.session_state.ho_ten
        st.session_state.so_cccd = so or st.session_state.so_cccd
        st.session_state.que_quan = que or st.session_state.que_quan

with col2:
    st.subheader("Nh·∫≠p/Ch·ªânh th·ªß c√¥ng")
    ho_va_ten = st.text_input("H·ªç v√† t√™n", value=st.session_state.ho_ten)
    so_cccd = st.text_input("S·ªë CCCD/CMND", value=st.session_state.so_cccd)
    que_quan = st.text_input("Qu√™ qu√°n", value=st.session_state.que_quan)

st.markdown("---")
st.header("2) Th√¥ng tin giao d·ªãch")
c1, c2 = st.columns(2)
with c1:
    st.subheader("OCR t·ª´ c√¢n (·∫£nh)")
    up_can = st.file_uploader("T·∫£i ·∫£nh c√¢n (JPG/PNG) ho·∫∑c ch·ª•p", type=['jpg','jpeg','png'], key="can")
    if up_can:
        img2 = img_from_upload(up_can)
        so_luong_ex = trich_xuat_can_from_image(img2)
        st.session_state.so_luong = so_luong_ex or st.session_state.so_luong

with c2:
    st.subheader("Nh·∫≠p th·ªß c√¥ng")
    so_luong_input = st.text_input("Kh·ªëi l∆∞·ª£ng", value=str(st.session_state.so_luong))
    don_gia_input = st.text_input("ƒê∆°n gi√° (VNƒê)", value="1000000")
    don_vi_unit = st.text_input("ƒê∆°n v·ªã t√≠nh (v√≠ d·ª•: ch·ªâ, kg)", value="ch·ªâ")
    mieu_ta = st.text_input("M√¥ t·∫£ h√†ng (v√≠ d·ª•: V√†ng mi·∫øng...)", value="H√†ng h√≥a")

st.markdown("---")
st.header("3) T·∫°o b·∫£n k√™ & Xu·∫•t")
if st.button("T√≠nh ti·ªÅn & T·∫°o b·∫£n k√™"):
    # ki·ªÉm tra
    if not ho_va_ten.strip():
        st.error("Nh·∫≠p h·ªç v√† t√™n.")
    elif not so_luong_input.strip() or not don_gia_input.strip():
        st.error("Nh·∫≠p ƒë·ªß kh·ªëi l∆∞·ª£ng v√† ƒë∆°n gi√°.")
    else:
        try:
            row = process_and_save(
                ho_va_ten.strip(), so_cccd.strip(), que_quan.strip(),
                so_luong_input.strip(), don_gia_input.strip(),
                don_vi_unit=don_vi_unit.strip(), mieu_ta=mieu_ta.strip(),
                don_vi_name=don_vi_name.strip(), mst=mst.strip(),
                dia_chi=dia_chi.strip(), dia_diem=dia_diem.strip(), phu_trach=phu_trach.strip()
            )
        except Exception as e:
            st.error("L·ªói d·ªØ li·ªáu: " + str(e))
            row = None

        if row:
            st.success("ƒê√£ ghi l·ªãch s·ª≠ giao d·ªãch.")
            # T·∫°o PDF n·∫øu c√≥ reportlab
            pdf_bytes = None
            if REPORTLAB_OK:
                try:
                    pdf_bytes = create_pdf_bytes(row)
                except Exception as e:
                    st.warning("T·∫°o PDF th·∫•t b·∫°i: " + str(e))
                    pdf_bytes = None

            if pdf_bytes:
                # Hi·ªÉn th·ªã PDF trong app (embed)
                b64 = base64.b64encode(pdf_bytes).decode('utf-8')
                pdf_display = f'<iframe src="data:application/pdf;base64,{b64}" width="100%" height="800px" type="application/pdf"></iframe>'
                st.markdown("### Xem tr∆∞·ªõc PDF (in tr·ª±c ti·∫øp t·ª´ ƒë√¢y ho·∫∑c t·∫£i xu·ªëng):", unsafe_allow_html=True)
                st.components.v1.html(pdf_display, height=820)
                st.download_button("T·∫£i PDF b·∫£n k√™", data=pdf_bytes, file_name=f"bangke_01_TNDN_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf", mime="application/pdf")
            else:
                # fallback HTML
                html_bytes = create_html(row)
                st.info("Kh√¥ng t·∫°o ƒë∆∞·ª£c PDF t·ª± ƒë·ªông ‚Äî t·∫£i HTML v√† in t·ª´ tr√¨nh duy·ªát (File ‚Üí Print ‚Üí Save as PDF).")
                st.download_button("T·∫£i HTML b·∫£n k√™ (In t·ª´ tr√¨nh duy·ªát)", data=html_bytes, file_name=f"bangke_01_TNDN_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html", mime="text/html")
                # hi·ªÉn th·ªã preview HTML
                st.components.v1.html(html_bytes.decode('utf-8'), height=700)

st.markdown("---")
st.header("4) L·ªãch s·ª≠ giao d·ªãch")
try:
    df_hist = pd.read_csv(LICH_SU_FILE)
    st.dataframe(df_hist.sort_values(by="Th·ªùi gian", ascending=False).reset_index(drop=True))
except Exception as e:
    st.error("Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c l·ªãch s·ª≠: " + str(e))
