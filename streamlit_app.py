# app.py
import streamlit as st
import cv2
import numpy as np
import pandas as pd
from datetime import datetime
import os
import pytz
from paddleocr import PaddleOCR
import io
import locale

# c·ªë g·∫Øng import reportlab, n·∫øu kh√¥ng c√≥ th√¨ s·∫Ω xu·∫•t HTML thay PDF
try:
    from reportlab.lib.pagesizes import A4
    from reportlab.pdfgen import canvas
    from reportlab.lib.units import mm
    from reportlab.pdfbase import pdfmetrics
    from reportlab.pdfbase.ttfonts import TTFont
    REPORTLAB_OK = True
except Exception:
    REPORTLAB_OK = False

# ---- C·∫•u h√¨nh ----
st.set_page_config(layout="wide", page_title="B·∫£ng k√™ 01/TNDN", page_icon="üìÑ")
locale.setlocale(locale.LC_ALL, '')  # d√πng ƒë·ªÉ format s·ªë theo locale n·∫øu kh·∫£ d·ª•ng

# ---- File l∆∞u l·ªãch s·ª≠ ----
lich_su_file = 'lich_su_giao_dich.csv'
if not os.path.exists(lich_su_file):
    df = pd.DataFrame(columns=['Th·ªùi gian', 'H·ªç v√† T√™n', 'S·ªë CCCD', 'Qu√™ qu√°n', 'Kh·ªëi l∆∞·ª£ng', 'ƒê∆°n gi√°', 'Th√†nh ti·ªÅn'])
    df.to_csv(lich_su_file, index=False)

# ---- Kh·ªüi t·∫°o OCR (PaddleOCR) ----
@st.cache_resource
def get_reader():
    # language vi (ti·∫øng Vi·ªát)
    return PaddleOCR(lang="vi", use_angle_cls=False)

ocr = get_reader()

# ---- H√†m ti·ªán √≠ch ----
def to_number_str(x):
    """Chuy·ªÉn chu·ªói c√≥ d·∫•u ph·∫©y/th·ª´a th√†nh s·ªë th√¥ (float)"""
    if x is None:
        return 0.0
    s = str(x).strip()
    s = s.replace(',', '').replace(' ', '')
    try:
        return float(s)
    except:
        return 0.0

# H√†m chuy·ªÉn s·ªë sang ch·ªØ (VNƒê) - b·∫£n r√∫t g·ªçn ƒë·ªß d√πng
dv_words = ['kh√¥ng','m·ªôt','hai','ba','b·ªën','nƒÉm','s√°u','b·∫£y','t√°m','ch√≠n']
def read3(n):
    s=''; n = int(n)
    tr, ch, d = n//100, (n%100)//10, n%10
    if tr>0:
        s += dv_words[tr]+' trƒÉm'
        if ch==0 and d>0: s+=' linh'
    if ch>1:
        s += (' ' if s else '')+dv_words[ch]+' m∆∞∆°i'
        if d==1: s+=' m·ªët'
        elif d==5: s+=' lƒÉm'
        elif d>0: s+=' '+dv_words[d]
    elif ch==1:
        s += (' ' if s else '')+'m∆∞·ªùi'
        if d==5: s+=' lƒÉm'
        elif d>0: s+=' '+dv_words[d]
    elif ch==0 and d>0:
        s += (' ' if s else '')+dv_words[d]
    return s.strip()

def to_words_vnd(num):
    num = int(round(num))
    if num <= 0:
        return "Kh√¥ng ƒë·ªìng"
    unit = ['',' ngh√¨n',' tri·ªáu',' t·ª∑',' ngh√¨n t·ª∑',' tri·ªáu t·ª∑']
    out=[]; i=0
    while num>0 and i<len(unit):
        chunk = num % 1000
        if chunk>0:
            out.insert(0, (read3(chunk) + unit[i]).strip())
        num //= 1000
        i += 1
    s = ' '.join(out).strip()
    s = s[0].upper() + s[1:] + ' ƒë·ªìng'
    return s

def format_money(v):
    try:
        return f"{int(round(v)):,}".replace(',', '.')
    except:
        return "0"

# ---- OCR tr√≠ch xu·∫•t th√¥ng tin t·ª´ CCCD v√† c√¢n ----
def trich_xuat_cccd(image_path):
    """Tr√≠ch h·ªç t√™n, s·ªë CCCD, qu√™ qu√°n t·ª´ ·∫£nh CCCD (c√≥ th·ªÉ kh√¥ng ho√†n h·∫£o)."""
    if image_path is None or not os.path.exists(image_path):
        return "", "", ""
    img = cv2.imread(image_path)
    result = ocr.ocr(img, cls=False)
    if not result or not result[0]:
        return "", "", ""
    ho_ten, so_cccd, que_quan = "", "", ""
    # Duy·ªát t·ª´ng d√≤ng OCR
    lines = [line for line in result[0]]
    for i, line in enumerate(lines):
        text = line[1][0].strip()
        up = text.upper()
        # H·ªç v√† t√™n
        if "H·ªå V√Ä T√äN" in up or "H·ªå T√äN" in up:
            # th∆∞·ªùng t√™n s·∫Ω ·ªü d√≤ng ti·∫øp theo
            if i+1 < len(lines):
                ho_ten = lines[i+1][1][0].strip()
        # S·ªë CCCD (12 ch·ªØ s·ªë)
        if "S·ªê" in up and any(tok.isdigit() and len(tok)==12 for tok in up.split()):
            for tok in up.split():
                if tok.isdigit() and len(tok)==12:
                    so_cccd = tok
                    break
        # Qu√™ qu√°n
        if "QU√ä QU√ÅN" in up:
            if i+1 < len(lines):
                que_quan = lines[i+1][1][0].strip()
    # fallback: n·∫øu ch∆∞a c√≥ s·ªë cccd, th·ª≠ t√¨m ·ªü m·ªçi d√≤ng
    if not so_cccd:
        for line in lines:
            txt = line[1][0]
            digits = ''.join(ch for ch in txt if ch.isdigit())
            if len(digits) >= 12:
                so_cccd = digits[:12]
                break
    return ho_ten, so_cccd, que_quan

def trich_xuat_can(image_path):
    """Tr√≠ch gi√° tr·ªã s·ªë t·ª´ ·∫£nh c√¢n (l·∫•y chu·ªói s·ªë ƒë·∫ßu ti√™n c√≥ xu·∫•t hi·ªán)."""
    if image_path is None or not os.path.exists(image_path):
        return ""
    img = cv2.imread(image_path)
    result = ocr.ocr(img, cls=False)
    if not result or not result[0]:
        return ""
    for line in result[0]:
        text = line[1][0]
        cleaned = ''.join(c for c in text if c.isdigit() or c in '.,')
        # ch·ªçn token c√≥ ch·ªØ s·ªë
        if any(ch.isdigit() for ch in cleaned):
            # lo·∫°i b·ªè d·∫•u th·ª´a
            cleaned = cleaned.replace(',', '.')
            # gi·ªØ 1 d·∫•u ch·∫•m
            parts = cleaned.split('.')
            if len(parts) > 2:
                cleaned = ''.join(parts[:-1]) + '.' + parts[-1]
            # tr·∫£ v·ªÅ
            return cleaned
    return ""

# ---- H√†m t·∫°o PDF theo m·∫´u 01/TNDN (m·ªôt b·∫£n k√™ cho 1 giao d·ªãch) ----
def create_pdf_bytes(row_dict):
    """
    row_dict c·∫ßn ch·ª©a c√°c tr∆∞·ªùng:
      don_vi, mst, dia_chi, dia_diem, phu_trach, ngay_lap (dd/mm/yyyy),
      ho_va_ten, so_cccd, que_quan, so_luong, don_gia, thanh_tien
    """
    buffer = io.BytesIO()
    if not REPORTLAB_OK:
        return None  # caller s·∫Ω fallback sang HTML
    # ƒëƒÉng k√Ω font h·ªó tr·ª£ ti·∫øng Vi·ªát (DejaVuSans)
    try:
        pdfmetrics.registerFont(TTFont('DejaVu', 'DejaVuSans.ttf'))
        font_name = 'DejaVu'
    except Exception:
        # n·∫øu kh√¥ng t√¨m th·∫•y DejaVu, d√πng font m·∫∑c ƒë·ªãnh
        font_name = 'Helvetica'

    c = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4
    left_margin = 18 * mm
    right_margin = 18 * mm
    cur_y = height - 18 * mm

    c.setFont(font_name, 10)
    c.drawString(left_margin, cur_y, "C·ªòNG H√íA X√É H·ªòI CH·ª¶ NGHƒ®A VI·ªÜT NAM")
    c.drawRightString(width - right_margin, cur_y, "M·∫´u s·ªë: 01/TNDN")
    cur_y -= 12
    c.setFont(font_name, 9)
    c.drawString(left_margin, cur_y, "ƒê·ªôc l·∫≠p - T·ª± do - H·∫°nh ph√∫c")
    c.setFont(font_name, 9)
    c.drawRightString(width - right_margin, cur_y, "(Ban h√†nh k√®m theo Th√¥ng t∆∞ 78/2014/TT-BTC)")
    cur_y -= 20

    c.setFont(font_name, 13)
    c.drawCentredString(width / 2, cur_y, "B·∫¢NG K√ä THU MUA H√ÄNG H√ìA, D·ªäCH V·ª§ MUA V√ÄO KH√îNG C√ì H√ìA ƒê∆†N")
    cur_y -= 18

    c.setFont(font_name, 10)
    # Th√¥ng tin ƒë∆°n v·ªã
    c.drawString(left_margin, cur_y, f"ƒê∆°n v·ªã: {row_dict.get('don_vi','')}")
    cur_y -= 12
    c.drawString(left_margin, cur_y, f"M√£ s·ªë thu·∫ø: {row_dict.get('mst','')}")
    cur_y -= 12
    c.drawString(left_margin, cur_y, f"ƒê·ªãa ch·ªâ: {row_dict.get('dia_chi','')}")
    cur_y -= 16

    # Th√¥ng tin thu mua
    c.drawString(left_margin, cur_y, f"ƒê·ªãa ƒëi·ªÉm thu mua: {row_dict.get('dia_diem','')}")
    cur_y -= 12
    c.drawString(left_margin, cur_y, f"Ng∆∞·ªùi ph·ª• tr√°ch: {row_dict.get('phu_trach','')}")
    cur_y -= 12
    c.drawString(left_margin, cur_y, f"Ng√†y l·∫≠p b·∫£ng k√™: {row_dict.get('ngay_lap','')}")
    cur_y -= 18

    # Th√¥ng tin ng∆∞·ªùi b√°n
    c.setFont(font_name, 11)
    c.drawString(left_margin, cur_y, "Th√¥ng tin ng∆∞·ªùi b√°n:")
    cur_y -= 14
    c.setFont(font_name, 10)
    c.drawString(left_margin + 6*mm, cur_y, f"H·ªç v√† t√™n: {row_dict.get('ho_va_ten','')}")
    cur_y -= 12
    c.drawString(left_margin + 6*mm, cur_y, f"S·ªë CCCD/CMND: {row_dict.get('so_cccd','')}")
    cur_y -= 12
    c.drawString(left_margin + 6*mm, cur_y, f"Qu√™ qu√°n: {row_dict.get('que_quan','')}")
    cur_y -= 18

    # B·∫£ng chi ti·∫øt (d·∫°ng ƒë∆°n h√†ng 1 d√≤ng)
    c.setFont(font_name, 10)
    table_x = left_margin
    table_w = width - left_margin - right_margin
    # v·∫Ω header
    headers = ["STT", "T√™n h√†ng/ d·ªãch v·ª•", "ƒêVT", "S·ªë l∆∞·ª£ng", "ƒê∆°n gi√° (VNƒê)", "Th√†nh ti·ªÅn (VNƒê)"]
    col_w = [20*mm, 70*mm, 20*mm, 30*mm, 35*mm, 45*mm]
    # header background box
    y_top = cur_y
    # draw header texts
    x = table_x
    c.setFont(font_name, 9)
    for i, h in enumerate(headers):
        c.rect(x, cur_y - 14, col_w[i], 16, stroke=1, fill=0)
        c.drawCentredString(x + col_w[i]/2, cur_y - 10, h)
        x += col_w[i]
    cur_y -= 18

    # one row content
    x = table_x
    c.rect(x, cur_y - 12, col_w[0], 14, stroke=1, fill=0)
    c.drawCentredString(x + col_w[0]/2, cur_y - 8, "1")
    x += col_w[0]

    c.rect(x, cur_y - 12, col_w[1], 14, stroke=1, fill=0)
    c.drawString(x + 4, cur_y - 10, row_dict.get('mieu_ta','H√†ng h√≥a'))
    x += col_w[1]

    c.rect(x, cur_y - 12, col_w[2], 14, stroke=1, fill=0)
    c.drawCentredString(x + col_w[2]/2, cur_y - 8, row_dict.get('don_vi',''))
    x += col_w[2]

    c.rect(x, cur_y - 12, col_w[3], 14, stroke=1, fill=0)
    c.drawCentredString(x + col_w[3]/2, cur_y - 8, f"{row_dict.get('so_luong',0)}")
    x += col_w[3]

    c.rect(x, cur_y - 12, col_w[4], 14, stroke=1, fill=0)
    c.drawRightString(x + col_w[4] - 4, cur_y - 8, format_money(row_dict.get('don_gia',0)))
    x += col_w[4]

    c.rect(x, cur_y - 12, col_w[5], 14, stroke=1, fill=0)
    c.drawRightString(x + col_w[5] - 4, cur_y - 8, format_money(row_dict.get('thanh_tien',0)))
    cur_y -= 26

    # T·ªïng c·ªông & b·∫±ng ch·ªØ
    c.setFont(font_name, 10)
    c.drawRightString(width - right_margin, cur_y, "T·ªïng c·ªông: " + format_money(row_dict.get('thanh_tien',0)) + " VNƒê")
    cur_y -= 14
    c.drawString(left_margin, cur_y, "S·ªë ti·ªÅn b·∫±ng ch·ªØ: " + to_words_vnd(row_dict.get('thanh_tien',0)))
    cur_y -= 28

    # N∆°i k√Ω
    c.drawString(left_margin, cur_y, f"{row_dict.get('dia_diem','')}, ng√†y {row_dict.get('ngay_lap','')}")
    c.drawString(left_margin + 6*mm, cur_y - 18, "Ng∆∞·ªùi l·∫≠p b·∫£ng k√™")
    c.drawString(width/2, cur_y - 18, "Ng∆∞·ªùi b√°n")
    c.drawString(width - right_margin - 80*mm, cur_y - 18, "Th·ªß tr∆∞·ªüng ƒë∆°n v·ªã")
    # leave space for signatures
    c.line(left_margin, cur_y - 60, left_margin + 60*mm, cur_y - 60)
    c.line(width/2, cur_y - 60, width/2 + 60*mm, cur_y - 60)
    c.line(width - right_margin - 80*mm, cur_y - 60, width - right_margin + 10*mm, cur_y - 60)

    c.save()
    buffer.seek(0)
    return buffer.read()

# ---- H√†m t·∫°o HTML (d·ª± ph√≤ng n·∫øu reportlab kh√¥ng c√≥) ----
def create_html(row_dict):
    html = f"""
<html>
<head>
<meta charset="utf-8">
<title>B·∫£ng k√™ 01/TNDN</title>
<style>
body{{font-family: Arial, Helvetica, sans-serif; padding:20px; color:#111}}
h2{{text-align:center}}
.table{{width:100%;border-collapse:collapse;margin-top:10px}}
.table, .table th, .table td{{border:1px solid #ddd}}
.table th, .table td{{padding:6px;text-align:left}}
.right{{text-align:right}}
.mono{{font-family:monospace}}
</style>
</head>
<body>
<p><strong>C·ªòNG H√íA X√É H·ªòI CH·ª¶ NGHƒ®A VI·ªÜT NAM</strong> <span style="float:right">M·∫´u s·ªë: 01/TNDN</span></p>
<p><em>ƒê·ªôc l·∫≠p - T·ª± do - H·∫°nh ph√∫c</em></p>
<h2>B·∫¢NG K√ä THU MUA H√ÄNG H√ìA, D·ªäCH V·ª§ MUA V√ÄO KH√îNG C√ì H√ìA ƒê∆†N</h2>
<p><strong>ƒê∆°n v·ªã:</strong> {row_dict.get('don_vi','')} &nbsp;&nbsp; <strong>MST:</strong> {row_dict.get('mst','')}</p>
<p><strong>ƒê·ªãa ƒëi·ªÉm thu mua:</strong> {row_dict.get('dia_diem','')} &nbsp;&nbsp; <strong>Ng∆∞·ªùi ph·ª• tr√°ch:</strong> {row_dict.get('phu_trach','')}</p>
<p><strong>Ng√†y l·∫≠p:</strong> {row_dict.get('ngay_lap','')}</p>

<table class="table">
<thead>
<tr><th>STT</th><th>T√™n h√†ng/d·ªãch v·ª•</th><th>ƒêVT</th><th>S·ªë l∆∞·ª£ng</th><th>ƒê∆°n gi√° (VNƒê)</th><th>Th√†nh ti·ªÅn (VNƒê)</th></tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>{row_dict.get('mieu_ta','H√†ng h√≥a')}</td>
<td>{row_dict.get('don_vi','')}</td>
<td class="right">{row_dict.get('so_luong',0)}</td>
<td class="right">{format_money(row_dict.get('don_gia',0))}</td>
<td class="right">{format_money(row_dict.get('thanh_tien',0))}</td>
</tr>
</tbody>
</table>

<p class="right"><strong>T·ªïng c·ªông: {format_money(row_dict.get('thanh_tien',0))} VNƒê</strong></p>
<p><strong>S·ªë ti·ªÅn b·∫±ng ch·ªØ:</strong> {to_words_vnd(row_dict.get('thanh_tien',0))}</p>

<p>{row_dict.get('dia_diem','')}, ng√†y {row_dict.get('ngay_lap','')}</p>
<table style="width:100%; margin-top:40px; border:none">
<tr>
<td style="width:33%; text-align:center">Ng∆∞·ªùi l·∫≠p b·∫£ng k√™<br>(K√Ω, ghi r√µ h·ªç t√™n)</td>
<td style="width:33%; text-align:center">Ng∆∞·ªùi b√°n<br/>(K√Ω, ghi r√µ h·ªç t√™n)</td>
<td style="width:33%; text-align:center">Th·ªß tr∆∞·ªüng ƒë∆°n v·ªã<br/>(K√Ω, ƒë√≥ng d·∫•u)</td>
</tr>
</table>

</body>
</html>
"""
    return html.encode('utf-8')

# ---- H√†m x·ª≠ l√Ω giao d·ªãch (gi√° tr·ªã tr·∫£ v·ªÅ: dict + thanh_tien) ----
def xu_ly_giao_dich_save(ho_va_ten, so_cccd, que_quan, so_luong_str, don_gia_str,
                         don_vi_unit='ch·ªâ', mieu_ta='H√†ng h√≥a', dia_diem='B·∫øn L·ª©c',
                         don_vi_name='', mst='', dia_chi='', phu_trach=''):
    try:
        so_luong = float(str(so_luong_str).replace(',', '.'))
        don_gia = float(str(don_gia_str).replace(',', '').replace('.', '')) if isinstance(don_gia_str, str) and ',' in don_gia_str else float(str(don_gia_str).replace(',', ''))
        # c·ªë g·∫Øng x·ª≠ l√Ω n·∫øu ng∆∞·ªùi d√πng nh·∫≠p v·ªõi d·∫•u ch·∫•m ph√¢n c√°ch h√†ng ngh√¨n
        thanh_tien = so_luong * don_gia

        vn_timezone = pytz.timezone('Asia/Ho_Chi_Minh')
        current_time = datetime.now(vn_timezone)
        ngay_tao_display = current_time.strftime("%d/%m/%Y")
        thoi_gian_luu = current_time.strftime("%Y-%m-%d %H:%M:%S")

        # L∆∞u l·ªãch s·ª≠
        df_moi = pd.DataFrame([{
            'Th·ªùi gian': thoi_gian_luu,
            'H·ªç v√† T√™n': ho_va_ten,
            'S·ªë CCCD': so_cccd,
            'Qu√™ qu√°n': que_quan,
            'Kh·ªëi l∆∞·ª£ng': so_luong,
            'ƒê∆°n gi√°': don_gia,
            'Th√†nh ti·ªÅn': thanh_tien
        }])
        df_moi.to_csv(lich_su_file, mode='a', header=False, index=False)

        # Chu·∫©n b·ªã dict cho in
        row = {
            'don_vi': don_vi_name or '',
            'mst': mst or '',
            'dia_chi': dia_chi or '',
            'dia_diem': dia_diem,
            'phu_trach': phu_trach,
            'ngay_lap': ngay_tao_display,
            'ho_va_ten': ho_va_ten,
            'so_cccd': so_cccd,
            'que_quan': que_quan,
            'so_luong': so_luong,
            'don_gia': don_gia,
            'thanh_tien': thanh_tien,
            'don_vi_unit': don_vi_unit,
            'mieu_ta': mieu_ta,
            'don_vi_unit_text': don_vi_unit
        }

        return row, thanh_tien
    except Exception as e:
        return None, str(e)

# ---- Giao di·ªán Streamlit ----
st.title("·ª®NG D·ª§NG T·∫†O B·∫¢N K√ä 01/TNDN (OCR CCCD + C√¢n)")
st.write("Nh·∫≠p ho·∫∑c ch·ª•p ·∫£nh CCCD v√† ·∫£nh c√¢n ‚Üí t·∫°o b·∫£n k√™ theo m·∫´u 01/TNDN v√† xu·∫•t PDF/HTML ƒë·ªÉ in.")

# Th√¥ng tin ƒë∆°n v·ªã (c√≥ th·ªÉ ƒë·ªÉ tr·ªëng)
with st.expander("Th√¥ng tin ƒë∆°n v·ªã (t√πy ch·ªçn)"):
    don_vi_name = st.text_input("T√™n ƒë∆°n v·ªã", value="")
    mst = st.text_input("M√£ s·ªë thu·∫ø", value="")
    dia_chi = st.text_input("ƒê·ªãa ch·ªâ tr·ª• s·ªü", value="")
    dia_diem = st.text_input("ƒê·ªãa ƒëi·ªÉm thu mua", value="B·∫øn L·ª©c")
    phu_trach = st.text_input("Ng∆∞·ªùi ph·ª• tr√°ch thu mua", value="")

st.markdown("---")
# Session state kh·ªüi t·∫°o
if 'ho_ten' not in st.session_state: st.session_state.ho_ten = ""
if 'so_cccd' not in st.session_state: st.session_state.so_cccd = ""
if 'que_quan' not in st.session_state: st.session_state.que_quan = ""
if 'so_luong' not in st.session_state: st.session_state.so_luong = ""

st.header("1. Th√¥ng tin ng∆∞·ªùi b√°n (kh√°ch h√†ng)")
col1, col2 = st.columns(2)
with col1:
    st.subheader("Tr√≠ch xu·∫•t t·ª´ CCCD")
    anh_cccd = st.file_uploader("T·∫£i ·∫£nh CCCD (JPG/PNG) ho·∫∑c ch·ª•p", type=['jpg','jpeg','png'])
    if anh_cccd:
        tmp_path = "temp_cccd.jpg"
        with open(tmp_path, "wb") as f:
            f.write(anh_cccd.getbuffer())
        ho, so, que = trich_xuat_cccd(tmp_path)
        # g√°n session state
        st.session_state.ho_ten = ho or st.session_state.ho_ten
        st.session_state.so_cccd = so or st.session_state.so_cccd
        st.session_state.que_quan = que or st.session_state.que_quan
        os.remove(tmp_path)

with col2:
    st.subheader("Nh·∫≠p th·ªß c√¥ng (ho·∫∑c ch·ªânh s·ª≠a)")
    ho_va_ten = st.text_input("H·ªç v√† T√™n", value=st.session_state.ho_ten)
    so_cccd = st.text_input("S·ªë CCCD/CMND", value=st.session_state.so_cccd)
    que_quan = st.text_input("Qu√™ qu√°n", value=st.session_state.que_quan)

st.markdown("---")
st.header("2. Th√¥ng tin giao d·ªãch")
col3, col4 = st.columns(2)
with col3:
    st.subheader("Tr√≠ch xu·∫•t t·ª´ c√¢n (·∫£nh)")
    anh_can = st.file_uploader("T·∫£i ·∫£nh c√¢n (ho·∫∑c ch·ª•p m√†n h√¨nh)", type=['jpg','jpeg','png'], key="can")
    if anh_can:
        tmp_path2 = "temp_can.jpg"
        with open(tmp_path2, "wb") as f:
            f.write(anh_can.getbuffer())
        so_luong_ex = trich_xuat_can(tmp_path2)
        st.session_state.so_luong = so_luong_ex or st.session_state.so_luong
        os.remove(tmp_path2)

with col4:
    st.subheader("Nh·∫≠p th·ªß c√¥ng")
    so_luong_input = st.text_input("Kh·ªëi l∆∞·ª£ng (v√≠ d·ª•: 1.0, 2.5)", value=str(st.session_state.so_luong))
    don_gia_input = st.text_input("ƒê∆°n gi√° (VNƒê)", value="1000000")
    don_vi_unit = st.text_input("ƒê∆°n v·ªã t√≠nh (v√≠ d·ª•: ch·ªâ, kg)", value="ch·ªâ")
    mieu_ta = st.text_input("M√¥ t·∫£ h√†ng (VD: V√†ng mi·∫øng...)", value="H√†ng h√≥a")

st.markdown("---")
st.header("3. T·∫°o b·∫£n k√™ (theo m·∫´u 01/TNDN)")

if st.button("T√≠nh ti·ªÅn v√† T·∫°o b·∫£n k√™"):
    # ki·ªÉm tra d·ªØ li·ªáu
    if not ho_va_ten.strip():
        st.error("Vui l√≤ng nh·∫≠p H·ªç v√† T√™n.")
    elif not so_luong_input.strip() or not don_gia_input.strip():
        st.error("Vui l√≤ng nh·∫≠p Kh·ªëi l∆∞·ª£ng v√† ƒê∆°n gi√°.")
    else:
        row, thanh_tien_or_err = xu_ly_giao_dich_save(
            ho_va_ten.strip(), so_cccd.strip(), que_quan.strip(),
            so_luong_input.strip(), don_gia_input.strip(),
            don_vi_unit=don_vi_unit.strip(), mieu_ta=mieu_ta.strip(),
            dia_diem=dia_diem.strip(), don_vi_name=don_vi_name.strip(),
            mst=mst.strip(), dia_chi=dia_chi.strip(), phu_trach=phu_trach.strip()
        )
        if row is None:
            st.error(f"L·ªói khi x·ª≠ l√Ω: {thanh_tien_or_err}")
        else:
            st.success("ƒê√£ l∆∞u giao d·ªãch v√†o l·ªãch s·ª≠.")
            # Hi·ªÉn th·ªã b·∫£n k√™ d·∫°ng text
            txt = f"""
C·ªòNG H√íA X√É H·ªòI CH·ª¶ NGHƒ®A VI·ªÜT NAM
ƒê·ªôc l·∫≠p - T·ª± do - H·∫°nh ph√∫c
-----------------------------

M·∫™U S·ªê 01/TNDN
B·∫¢NG K√ä THU MUA H√ÄNG H√ìA, D·ªäCH V·ª§ MUA V√ÄO KH√îNG C√ì H√ìA ƒê∆†N

ƒê∆°n v·ªã: {row.get('don_vi','')}
M√£ s·ªë thu·∫ø: {row.get('mst','')}
ƒê·ªãa ch·ªâ: {row.get('dia_chi','')}

ƒê·ªãa ƒëi·ªÉm thu mua: {row.get('dia_diem','')}
Ng∆∞·ªùi ph·ª• tr√°ch: {row.get('phu_trach','')}
Ng√†y l·∫≠p b·∫£ng k√™: {row.get('ngay_lap','')}

TH√îNG TIN NG∆Ø·ªúI B√ÅN:
- H·ªç v√† t√™n: {row.get('ho_va_ten','')}
- S·ªë CCCD: {row.get('so_cccd','')}
- Qu√™ qu√°n: {row.get('que_quan','')}

CHI TI·∫æT GIAO D·ªäCH:
- Kh·ªëi l∆∞·ª£ng: {row.get('so_luong',0)} {don_vi_unit}
- ƒê∆°n gi√°: {format_money(row.get('don_gia',0))} VNƒê/{don_vi_unit}
- Th√†nh ti·ªÅn: {format_money(row.get('thanh_tien',0))} VNƒê

T·ªïng c·ªông: {format_money(row.get('thanh_tien',0))} VNƒê
S·ªë ti·ªÅn b·∫±ng ch·ªØ: {to_words_vnd(row.get('thanh_tien',0))}

{row.get('dia_diem','')}, ng√†y {row.get('ngay_lap','')}
Ng∆∞·ªùi l·∫≠p b·∫£ng k√™: (K√Ω, ghi r√µ h·ªç t√™n)      Ng∆∞·ªùi b√°n: (K√Ω, ghi r√µ h·ªç t√™n)
"""
            st.code(txt, language='text')

            # T·∫°o PDF (n·∫øu c√≥ reportlab), ho·∫∑c HTML fallback
            pdf_bytes = None
            if REPORTLAB_OK:
                try:
                    pdf_bytes = create_pdf_bytes(row)
                except Exception as e:
                    st.warning(f"T·∫°o PDF th·∫•t b·∫°i (reportlab): {e}")
                    pdf_bytes = None

            if pdf_bytes:
                st.success("T·∫°o PDF th√†nh c√¥ng.")
                st.download_button("T·∫£i PDF B·∫£ng K√™ (01/TNDN)", data=pdf_bytes, file_name=f"bang_ke_01_TNDN_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf", mime="application/pdf")
            else:
                # T·∫°o HTML v√† cho t·∫£i
                html_bytes = create_html(row)
                st.info("Kh√¥ng th·ªÉ t·∫°o PDF t·ª± ƒë·ªông (reportlab kh√¥ng c√≥ ho·∫∑c l·ªói). T·∫£i HTML ƒë·ªÉ in t·ª´ tr√¨nh duy·ªát.")
                st.download_button("T·∫£i file HTML (In t·ª´ tr√¨nh duy·ªát -> Save as PDF)", data=html_bytes, file_name=f"bang_ke_01_TNDN_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html", mime="text/html")

st.markdown("---")
st.header("4. L·ªãch s·ª≠ giao d·ªãch")
if os.path.exists(lich_su_file):
    try:
        df_lich_su = pd.read_csv(lich_su_file)
        st.dataframe(df_lich_su.sort_values(by='Th·ªùi gian', ascending=False).reset_index(drop=True))
    except Exception as e:
        st.error("Kh√¥ng th·ªÉ ƒë·ªçc l·ªãch s·ª≠ giao d·ªãch: " + str(e))
else:
    st.info("Ch∆∞a c√≥ giao d·ªãch n√†o.")
