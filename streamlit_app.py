# streamlit_app.py
import streamlit as st
import cv2
import numpy as np
import pandas as pd
import sqlite3
from datetime import datetime
import pytz
from paddleocr import PaddleOCR
from io import BytesIO
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import re
import os
import matplotlib.pyplot as plt
import io

# --- Kh·ªüi t·∫°o OCR ---
@st.cache_resource
def get_reader():
    """Kh·ªüi t·∫°o PaddleOCR m·ªôt l·∫ßn v√† l∆∞u v√†o cache."""
    return PaddleOCR(lang="vi", use_angle_cls=False)

ocr = get_reader()

# --- K·∫øt n·ªëi SQLite ---
conn = sqlite3.connect("lich_su_giao_dich.db", check_same_thread=False)
c = conn.cursor()

# T·∫°o b·∫£ng l·ªãch s·ª≠ giao d·ªãch n·∫øu ch∆∞a t·ªìn t·∫°i
c.execute('''
CREATE TABLE IF NOT EXISTS lich_su (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    thoi_gian TEXT,
    ho_va_ten TEXT,
    so_cccd TEXT,
    que_quan TEXT,
    khoi_luong REAL,
    don_gia REAL,
    thanh_tien REAL
)
''')
conn.commit()

# --- Chuy·ªÉn s·ªë sang ch·ªØ ---
def doc_so_thanh_chu(number):
    if not isinstance(number, (int, float)) or number < 0:
        return "S·ªë kh√¥ng h·ª£p l·ªá"
    number = int(number)
    
    chu_so = ["kh√¥ng", "m·ªôt", "hai", "ba", "b·ªën", "nƒÉm", "s√°u", "b·∫£y", "t√°m", "ch√≠n"]
    don_vi = ["", "ngh√¨n", "tri·ªáu", "t·ª∑", "ngh√¨n t·ª∑", "tri·ªáu t·ª∑", "t·ª∑ t·ª∑"]
    
    def doc_ba_so(so):
        if so == 0: return ""
        tram = so // 100
        chuc = (so % 100) // 10
        don_vi_le = so % 10
        
        chuoi = ""
        if tram > 0:
            chuoi += chu_so[tram] + " trƒÉm "
        
        if chuc == 0 and don_vi_le > 0 and tram > 0:
            chuoi += "linh "
        elif chuc == 1:
            chuoi += "m∆∞·ªùi "
        elif chuc > 1:
            chuoi += chu_so[chuc] + " m∆∞∆°i "
        
        if don_vi_le > 0:
            chuoi += chu_so[don_vi_le]
        
        return chuoi.strip()

    s = str(number)
    parts = []
    
    while len(s) > 0:
        if len(s) >= 3:
            part = s[-3:]
            s = s[:-3]
        else:
            part = s
            s = ""
        parts.insert(0, int(part))
    
    ket_qua = ""
    for i, p in enumerate(parts):
        if p != 0:
            ket_qua += doc_ba_so(p) + " " + don_vi[len(parts) - 1 - i] + " "
    
    return ket_qua.strip().capitalize() + " ƒë·ªìng"

# --- Ti·ªÅn x·ª≠ l√Ω ·∫£nh cho OCR ---
def preprocess_image(img_bytes):
    """Ti·ªÅn x·ª≠ l√Ω ·∫£nh ƒë·ªÉ c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng OCR."""
    img = cv2.imdecode(np.frombuffer(img_bytes, np.uint8), cv2.IMREAD_COLOR)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    equalized = cv2.equalizeHist(blurred)
    return equalized

# --- H√†m OCR CCCD ---
def trich_xuat_cccd(image_bytes):
    try:
        if image_bytes is None: return "", "", ""
        preprocessed_img = preprocess_image(image_bytes)
        result = ocr.ocr(preprocessed_img, cls=False)
        
        ho_ten, so_cccd, que_quan = "", "", ""
        if result and result[0]:
            for line in result[0]:
                text = line[1][0].upper()
                if "H·ªå V√Ä T√äN" in text:
                    idx = result[0].index(line)
                    if idx + 1 < len(result[0]):
                        ho_ten = result[0][idx + 1][1][0]
                elif "S·ªê" in text and len(text.split()[-1]) == 12 and text.split()[-1].isdigit():
                    so_cccd = text.split()[-1]
                elif "QU√ä QU√ÅN" in text:
                    idx = result[0].index(line)
                    if idx + 1 < len(result[0]):
                        que_quan = result[0][idx + 1][1][0]
        return ho_ten, so_cccd, que_quan
    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω OCR: {e}")
        return "", "", ""

# --- H√†m OCR c√¢n ---
def trich_xuat_can(image_bytes):
    try:
        if image_bytes is None: return ""
        preprocessed_img = preprocess_image(image_bytes)
        result = ocr.ocr(preprocessed_img, cls=False)
        if result and result[0]:
            for line in result[0]:
                text = line[1][0]
                cleaned_text = ''.join(c for c in text if c.isdigit() or c == '.')
                if cleaned_text:
                    return cleaned_text
        return ""
    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω OCR c√¢n: {e}")
        return ""

# --- H√†m t√≠nh ti·ªÅn v√† l∆∞u SQLite ---
def xu_ly_giao_dich(ho_va_ten, so_cccd, que_quan, so_luong_str, don_gia_str):
    try:
        so_luong = float(so_luong_str.replace(',', ''))
        don_gia = float(don_gia_str.replace(',', ''))
        thanh_tien = so_luong * don_gia

        vn_timezone = pytz.timezone('Asia/Ho_Chi_Minh')
        current_time = datetime.now(vn_timezone)
        thoi_gian_luu = current_time.strftime("%Y-%m-%d %H:%M:%S")

        c.execute('''
            INSERT INTO lich_su (thoi_gian, ho_va_ten, so_cccd, que_quan, khoi_luong, don_gia, thanh_tien)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (thoi_gian_luu, ho_va_ten, so_cccd, que_quan, so_luong, don_gia, thanh_tien))
        conn.commit()

        return {
            "ho_va_ten": ho_va_ten,
            "so_cccd": so_cccd,
            "que_quan": que_quan,
            "so_luong": so_luong,
            "don_gia": don_gia,
            "thanh_tien": thanh_tien,
            "ngay_tao": current_time.strftime("%d/%m/%Y")
        }
    except (ValueError, TypeError) as e:
        st.error(f"L·ªói: D·ªØ li·ªáu nh·∫≠p kh√¥ng h·ª£p l·ªá. {e}")
        return None

# --- H√†m t·∫°o PDF ---
try:
    pdfmetrics.registerFont(TTFont('TimesNewRoman', 'Times New Roman.ttf'))
except:
    st.warning("Kh√¥ng t√¨m th·∫•y font 'Times New Roman.ttf'. PDF c√≥ th·ªÉ hi·ªÉn th·ªã l·ªói font.")
    pdfmetrics.registerFont(TTFont('Vera', 'Vera.ttf'))

def tao_pdf(data):
    buffer = BytesIO()
    pdf = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4
    pdf.setFont("TimesNewRoman", 12)

    pdf.drawCentredString(width/2, height-50, "C·ªòNG H√íA X√É H·ªòI CH·ª¶ NGHƒ®A VI·ªÜT NAM")
    pdf.drawCentredString(width/2, height-70, "ƒê·ªôc l·∫≠p - T·ª± do - H·∫°nh ph√∫c")
    pdf.drawCentredString(width/2, height-90, "B·∫¢NG K√ä THU MUA H√ÄNG H√ìA, D·ªäCH V·ª§ MUA V√ÄO")
    
    pdf.drawString(50, height-130, f"H·ªç v√† t√™n: {data['ho_va_ten']}")
    pdf.drawString(50, height-150, f"S·ªë CCCD: {data['so_cccd']}")
    pdf.drawString(50, height-170, f"Qu√™ qu√°n: {data['que_quan']}")
    
    y = height-210
    pdf.drawString(50, y, "STT")
    pdf.drawString(100, y, "T√™n h√†ng/d·ªãch v·ª•")
    pdf.drawString(300, y, "S·ªë l∆∞·ª£ng")
    pdf.drawString(380, y, "ƒê∆°n gi√°")
    pdf.drawString(480, y, "Th√†nh ti·ªÅn")
    y -= 20
    pdf.drawString(50, y, "1")
    pdf.drawString(100, y, "H√†ng h√≥a")
    pdf.drawString(300, y, str(data['so_luong']))
    pdf.drawString(380, y, f"{data['don_gia']:,.0f}")
    pdf.drawString(480, y, f"{data['thanh_tien']:,.0f}")

    y -= 40
    pdf.drawString(50, y, f"T·ªïng c·ªông: {data['thanh_tien']:,.0f} VNƒê")
    y -= 20
    pdf.drawString(50, y, f"B·∫±ng ch·ªØ: {doc_so_thanh_chu(data['thanh_tien'])}")

    pdf.save()
    buffer.seek(0)
    return buffer

# --- Giao di·ªán Streamlit ---
def main_app():
    st.set_page_config(layout="wide")
    st.title("·ª®NG D·ª§NG T·∫†O B·∫¢N K√ä MUA H√ÄNG - 01/TNDN")
    st.markdown("---")

    tab1, tab2 = st.tabs(["T·∫°o giao d·ªãch", "L·ªãch s·ª≠ & Th·ªëng k√™"])

    with tab1:
        create_new_transaction_page()

    with tab2:
        history_and_stats_page()

def create_new_transaction_page():
    if 'ho_ten' not in st.session_state:
        st.session_state.ho_ten = ""
    if 'so_cccd' not in st.session_state:
        st.session_state.so_cccd = ""
    if 'que_quan' not in st.session_state:
        st.session_state.que_quan = ""
    if 'so_luong' not in st.session_state:
        st.session_state.so_luong = ""

    st.subheader("1. Tr√≠ch xu·∫•t th√¥ng tin t·ª´ ·∫£nh üñºÔ∏è")
    col_cccd, col_can = st.columns(2)

    with col_cccd:
        st.subheader("Ch·ª•p ·∫£nh ho·∫∑c t·∫£i ·∫£nh CCCD")
        anh_cccd = st.camera_input("Ch·ª•p ·∫£nh CCCD")
        uploaded_cccd = st.file_uploader("Ho·∫∑c t·∫£i ·∫£nh CCCD", type=["jpg", "jpeg", "png"], key="cccd_uploader")
        
        if anh_cccd:
            with st.spinner('ƒêang x·ª≠ l√Ω OCR...'):
                ho_ten, so_cccd, que_quan = trich_xuat_cccd(anh_cccd.read())
                st.session_state.ho_ten = ho_ten
                st.session_state.so_cccd = so_cccd
                st.session_state.que_quan = que_quan
            st.success("Tr√≠ch xu·∫•t th√†nh c√¥ng!")
        elif uploaded_cccd:
            with st.spinner('ƒêang x·ª≠ l√Ω OCR...'):
                ho_ten, so_cccd, que_quan = trich_xuat_cccd(uploaded_cccd.read())
                st.session_state.ho_ten = ho_ten
                st.session_state.so_cccd = so_cccd
                st.session_state.que_quan = que_quan
            st.success("Tr√≠ch xu·∫•t th√†nh c√¥ng!")
    
    with col_can:
        st.subheader("Ch·ª•p ·∫£nh ho·∫∑c t·∫£i ·∫£nh c√¢n")
        anh_can = st.camera_input("Ch·ª•p ·∫£nh m√†n h√¨nh c√¢n")
        uploaded_can = st.file_uploader("Ho·∫∑c t·∫£i ·∫£nh c√¢n", type=["jpg", "jpeg", "png"], key="can_uploader")
        
        if anh_can:
            with st.spinner('ƒêang x·ª≠ l√Ω OCR...'):
                so_luong = trich_xuat_can(anh_can.read())
                st.session_state.so_luong = so_luong
            st.success("Tr√≠ch xu·∫•t th√†nh c√¥ng!")
        elif uploaded_can:
            with st.spinner('ƒêang x·ª≠ l√Ω OCR...'):
                so_luong = trich_xuat_can(uploaded_can.read())
                st.session_state.so_luong = so_luong
            st.success("Tr√≠ch xu·∫•t th√†nh c√¥ng!")

    st.markdown("---")

    st.subheader("2. T·∫°o b·∫£n k√™ v√† l∆∞u giao d·ªãch üìù")
    with st.form("form_giao_dich"):
        ho_ten_input = st.text_input("H·ªç v√† T√™n", value=st.session_state.ho_ten)
        so_cccd_input = st.text_input("S·ªë CƒÉn c∆∞·ªõc c√¥ng d√¢n", value=st.session_state.so_cccd)
        que_quan_input = st.text_input("Qu√™ qu√°n", value=st.session_state.que_quan)
        so_luong_input = st.text_input("Kh·ªëi l∆∞·ª£ng (ch·ªâ)", value=st.session_state.so_luong)
        don_gia_input = st.text_input("ƒê∆°n gi√° (VNƒê/ch·ªâ)")
        
        col_submit, col_download = st.columns(2)
        with col_submit:
            submitted = st.form_submit_button("L∆∞u giao d·ªãch")
        
        if submitted:
            if not ho_ten_input or not so_luong_input or not don_gia_input:
                st.error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin.")
            else:
                giao_dich_data = xu_ly_giao_dich(ho_ten_input, so_cccd_input, que_quan_input, so_luong_input, don_gia_input)
                if giao_dich_data:
                    st.success("Giao d·ªãch ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!")
                    st.session_state['last_giao_dich'] = giao_dich_data
                    
                    st.metric(label="Th√†nh Ti·ªÅn", value=f"{giao_dich_data['thanh_tien']:,.0f} VNƒê")
                    st.write(f"B·∫±ng ch·ªØ: {doc_so_thanh_chu(giao_dich_data['thanh_tien'])}")
                    
                    pdf_bytes = tao_pdf(giao_dich_data)
                    with col_download:
                        st.download_button(
                            "T·∫£i b·∫£n k√™ PDF",
                            data=pdf_bytes,
                            file_name=f"bang_ke_{giao_dich_data['ho_va_ten']}.pdf",
                            mime="application/pdf"
                        )
    st.markdown("---")
    if st.button("L√†m m·ªõi trang"):
        st.experimental_rerun()

def history_and_stats_page():
    st.header("L·ªãch s·ª≠ v√† Th·ªëng k√™ üìà")
    
    df = pd.read_sql_query("SELECT * FROM lich_su ORDER BY thoi_gian DESC", conn)
    
    if df.empty:
        st.info("Ch∆∞a c√≥ giao d·ªãch n√†o ƒë∆∞·ª£c ghi l·∫°i.")
        return

    # --- B·ªô l·ªçc ---
    st.subheader("B·ªô l·ªçc")
    col1, col2 = st.columns(2)
    with col1:
        ho_ten_search = st.text_input("T√¨m ki·∫øm theo t√™n kh√°ch h√†ng")
    with col2:
        cccd_search = st.text_input("T√¨m ki·∫øm theo CCCD")
        
    df_filtered = df.copy()
    if ho_ten_search:
        df_filtered = df_filtered[df_filtered['ho_va_ten'].str.contains(ho_ten_search, case=False, na=False)]
    if cccd_search:
        df_filtered = df_filtered[df_filtered['so_cccd'].str.contains(cccd_search, case=False, na=False)]

    st.markdown("---")

    # --- Th·ªëng k√™ ---
    st.subheader("Th·ªëng k√™")
    
    col_stats1, col_stats2, col_stats3 = st.columns(3)
    with col_stats1:
        tong_giao_dich = len(df_filtered)
        st.metric("T·ªïng giao d·ªãch", value=f"{tong_giao_dich}")
    with col_stats2:
        tong_thanh_tien = df_filtered['thanh_tien'].sum()
        st.metric("T·ªïng th√†nh ti·ªÅn", value=f"{tong_thanh_tien:,.0f} VNƒê")
    with col_stats3:
        tong_khoi_luong = df_filtered['khoi_luong'].sum()
        st.metric("T·ªïng kh·ªëi l∆∞·ª£ng", value=f"{tong_khoi_luong} ch·ªâ")

    st.markdown("---")
    
    # --- Bi·ªÉu ƒë·ªì ---
    st.subheader("Bi·ªÉu ƒë·ªì doanh thu")
    df_filtered['thoi_gian'] = pd.to_datetime(df_filtered['thoi_gian'])
    df_filtered['ngay'] = df_filtered['thoi_gian'].dt.date
    daily_revenue = df_filtered.groupby('ngay')['thanh_tien'].sum()
    
    fig, ax = plt.subplots()
    ax.bar(daily_revenue.index.astype(str), daily_revenue.values)
    ax.set_title("Doanh thu h√†ng ng√†y")
    ax.set_ylabel("Th√†nh ti·ªÅn (VNƒê)")
    ax.tick_params(axis='x', rotation=45, labelsize=8)
    plt.tight_layout()
    st.pyplot(fig)
    
    st.markdown("---")

    # --- L·ªãch s·ª≠ giao d·ªãch chi ti·∫øt ---
    st.subheader("L·ªãch s·ª≠ giao d·ªãch")
    st.dataframe(df_filtered)
    
    # N√∫t t·∫£i xu·ªëng CSV
    csv_file = df_filtered.to_csv(index=False)
    st.download_button(
        label="T·∫£i xu·ªëng CSV",
        data=csv_file,
        file_name='lich_su_giao_dich.csv',
        mime='text/csv'
    )

# --- Ch·∫°y ·ª©ng d·ª•ng ---
if __name__ == "__main__":
    main_app()
